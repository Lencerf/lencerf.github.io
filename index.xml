<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lencerf&#39;s Walk</title>
    <link>/index.xml</link>
    <description>Recent content on Lencerf&#39;s Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Dec 2016 10:16:18 -0500</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>launchd 和 click</title>
      <link>/post/2016-12-15-launchd-and-click/</link>
      <pubDate>Thu, 15 Dec 2016 10:16:18 -0500</pubDate>
      
      <guid>/post/2016-12-15-launchd-and-click/</guid>
      <description>&lt;p&gt;起因是看了这篇介绍 Beancount 的&lt;a href=&#34;https://wzyboy.im/post/1063.html&#34;&gt;博文&lt;/a&gt;后，我就变成了数豆狂魔，大概是心底某种控制欲被激发了出来，没事就喜欢打开 &lt;a href=&#34;https://github.com/beancount/fava&#34;&gt;fava&lt;/a&gt; 研究自己那点生活补贴流向哪里了。每次开 fava 前都需要在终端里现开启之，有点麻烦，于是我就想让它一直运行在后台。在 macOS 上开启一个程序并让它一直运行在后台的方法自然是用 launchd，我很快就写好了配置文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
  &amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;lencerf.fava&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
      &amp;lt;string&amp;gt;/usr/local/bin/fava&amp;lt;/string&amp;gt;
      &amp;lt;string&amp;gt;/Users/Lencerf/Dropbox/Application Data/BeanCount/main.bean&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;
    &amp;lt;true/&amp;gt;
  &amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而 &lt;code&gt;launchctl load fava.plist&lt;/code&gt; 后在浏览器里访问 &lt;code&gt;http://localhost:5000/&lt;/code&gt; 却毫无反应。完全想不出问题出在哪里，本着控制变量的原则，我先尝试一下 bean-web。把 &lt;code&gt;/usr/local/bin/fava&lt;/code&gt; 换成 &lt;code&gt;/usr/local/bin/bean-web&lt;/code&gt; 后访问 &lt;code&gt;http://localhost:8080/&lt;/code&gt;，可以打开 bean-web 页面，说明问题在 fava 身上。&lt;/p&gt;

&lt;p&gt;但是 fava.plist 加载之后 fava 运行在后台，看不到任何输出信息，如何 debug 呢？Google 之后找到了办法，&lt;a href=&#34;http://serverfault.com/questions/183589/how-do-i-activate-launchd-logging-on-os-x&#34;&gt;这个页面&lt;/a&gt;上提供了几个解决办法，我采用的第二个办法，指定输出到文件，在上面的 plist 文件中加入几个键值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;/path/to/logfile.log&amp;lt;/string&amp;gt;
&amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;/path/to/error.log&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是当我打开再次 &lt;code&gt;launchd load fava.plist&lt;/code&gt; 后，在 error.log 中看到了大量这样的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):   File &amp;quot;/usr/local/bin/fava&amp;quot;, line 11, in &amp;lt;module&amp;gt;
    sys.exit(main())
  File &amp;quot;/usr/local/lib/python3.5/site-packages/click/core.py&amp;quot;, line 716, in __call__
    return self.main(*args, **kwargs)
  File &amp;quot;/usr/local/lib/python3.5/site-packages/click/core.py&amp;quot;, line 675, in main
    _verify_python3_env()
  File &amp;quot;/usr/local/lib/python3.5/site-packages/click/_unicodefun.py&amp;quot;, line 119, in _verify_python3_env
    &#39;mitigation steps.&#39; + extra)
RuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment.  Either run this under Python 2 or consult http://click.pocoo.org/python3/ for mitigation steps.

This system lists a couple of UTF-8 supporting locales that
you can pick from.  The following suitable locales where
discovered: af_ZA.UTF-8, am_ET.UTF-8, be_BY.UTF-8, bg_BG.UTF-8, ca_ES.UTF-8, cs_CZ.UTF-8, da_DK.UTF-8, de_AT.UTF-8, de_CH.UTF-8, de_DE.UTF-8, el_GR.UTF-8, en_AU.UTF-8, en_CA.UTF-8, en_GB.UTF-8, en_IE.UTF-8, en_NZ.UTF-8, en_US.UTF-8, es_ES.UTF-8, et_EE.UTF-8, eu_ES.UTF-8, fi_FI.UTF-8, fr_BE.UTF-8, fr_CA.UTF-8, fr_CH.UTF-8, fr_FR.UTF-8, he_IL.UTF-8, hr_HR.UTF-8, hu_HU.UTF-8, hy_AM.UTF-8, is_IS.UTF-8, it_CH.UTF-8, it_IT.UTF-8, ja_JP.UTF-8, kk_KZ.UTF-8, ko_KR.UTF-8, lt_LT.UTF-8, nl_BE.UTF-8, nl_NL.UTF-8, no_NO.UTF-8, pl_PL.UTF-8, pt_BR.UTF-8, pt_PT.UTF-8, ro_RO.UTF-8, ru_RU.UTF-8, sk_SK.UTF-8, sl_SI.UTF-8, sr_YU.UTF-8, sv_SE.UTF-8, tr_TR.UTF-8, uk_UA.UTF-8, zh_CN.UTF-8, zh_HK.UTF-8, zh_TW.UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看上去和 click 这个 Python 包有点关系，搜索了一番，看了看这个 &lt;a href=&#34;https://github.com/madjar/nox/issues/19&#34;&gt;issue&lt;/a&gt;，猜想可能和没有指定语言有关系，看来需要想办法在 fava.plist 中指定相关的环境变量，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;EnvironmentVariables&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;LANG&amp;lt;/key&amp;gt;
    &amp;lt;string&amp;gt;en_US.UTF-8&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再次加载，成功！&lt;/p&gt;

&lt;p&gt;（实际解决问题的过程比这复杂多了，中间走了歪路差不多把 /usr/local/bin/fava 自己写了一遍。真是大大的 bgm38。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用树莓派3搭一个简易的 NAS</title>
      <link>/post/2016-12-16-build-a-simple-nas-using-raspberry-pi/</link>
      <pubDate>Tue, 06 Dec 2016 21:48:10 -0500</pubDate>
      
      <guid>/post/2016-12-16-build-a-simple-nas-using-raspberry-pi/</guid>
      <description>

&lt;p&gt;先放结论：这个简易 NAS 真的非常简易，大概就是一个无线存储盘的效果。如果需要一个比较可靠的 NAS，多掏点银子买专业的吧。&lt;/p&gt;

&lt;p&gt;在升级 macOS Sierra 的当天晚上，我的 Mac 原配的 HDD 就坏了（绝对是库克干的好事），只剩下一块 120GB 的 SSD 作为唯一内置存储设备。我原本已经有一块 1TB 的移动硬盘，但是也已经塞满了。为了满足存储需要只能再去买了一块 2TB 的盘。两块盘同时插在机子上很麻烦，笔记本的可移动性大大降低了。于是我想到了用树莓派搭一个简易 NAS，把移动硬盘变成无线硬盘。&lt;/p&gt;

&lt;p&gt;材料：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;树莓派 Raspberry Pi 3 Model B 及电源线和适配器&lt;/li&gt;
&lt;li&gt;Micro SD Card&lt;/li&gt;
&lt;li&gt;移动硬盘&lt;/li&gt;
&lt;li&gt;带独立供电的 USB Hub&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此外在配置过程中需要显示器、键盘和鼠标，没有这些设备的话理论上也行，但是会相当麻烦。&lt;/p&gt;

&lt;h2 id=&#34;系统安装&#34;&gt;系统安装&lt;/h2&gt;

&lt;p&gt;首先安装官网上的&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&#34;&gt;指引&lt;/a&gt;，下载 Raspbian 系统镜像并安装到 Micro SD Card 之上。&lt;/p&gt;

&lt;h2 id=&#34;配置-raspbian&#34;&gt;配置 Raspbian&lt;/h2&gt;

&lt;p&gt;把 Micor SD Card 插入树莓派，接上电源、显示器、鼠标、键盘，呈现在眼前的就如同一台普通的 Linux 计算机了。在终端里键入 &lt;code&gt;sudo raspy-config&lt;/code&gt; 可以配置，有这么几个必须进行的操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;开启 ssh，这样今后进行一些简易维护就不需要显示器等设备了。&lt;/li&gt;
&lt;li&gt;修改密码。Raspbian 的默认用户名和密码分别是 pi 和 raspberry，改掉密码可以防止不怀好意的人登陆你的树莓派。&lt;/li&gt;
&lt;li&gt;修改键盘布局和语言。树莓派是英国的树莓派基金会所开发，所以默认键盘布局和语言都是英式。更换布局的具体步骤可参见&lt;a href=&#34;http://henson.github.io/post/raspberrypi4/&#34;&gt;这篇文章&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;修改用户-pi-的-uid&#34;&gt;修改用户 pi 的 uid&lt;/h2&gt;

&lt;p&gt;需要这一步操作的原因是我选择 HFS+ 作为移动硬盘的文件格式，由于这种文件格式的特性，简而言之，每个文件记录了它的拥有者的 uid，如果当前用户的 uid 和文件里记录的 uid 不一致，那么就无权访问。macOS 上第一个用户的 uid 是 501，而树莓派上默认用户 pi 的 uid 是一个四位数，所以要把 pi 的 uid 改成 501，这样读写就不会遇到麻烦了。&lt;/p&gt;

&lt;p&gt;在 macOS 上执行 &lt;code&gt;id&lt;/code&gt; 命令可以查看自己的 uid，如果不是 501，那么下面的命令里应该换成正确的数值。&lt;/p&gt;

&lt;p&gt;修改用户 pi 的 uid 需要注销并登陆到 root 账户上去改，树莓派默认又是锁定了 root 账户的。首先为 root 账户设置密码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo passwd root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后解锁 root 账户&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo passwd --unlock root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后去 raspi-config 里面把启动选项改成 Console，重启树莓派登入 root 账户并修改 uid：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;usermod -u 501 pi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再去 raspi-config 里把启动选项改回 Desktop Autologin，返回 pi 账户进行下一步操作。&lt;/p&gt;

&lt;h2 id=&#34;开启文件共享&#34;&gt;开启文件共享&lt;/h2&gt;

&lt;p&gt;安装 netatalk 和 avahi-daemon&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update; sudo apt-get upgrade; sudo apt-get install netatalk avahi-daemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完后，如果笔记本和树莓派连接到同一无线局域网，应该就能在 Finder 的侧栏看到树莓派了，用 pi 用户登陆可以访问 Home Directory，也就是 Raspbian 上 pi 用户的主文件夹。当然我需要的是访问移动硬盘。把移动硬盘通过 USB Hub 接上树莓派。首先确认在 Raspbian 系统下能够正常读写移动硬盘，如果移动硬盘采用了 HFS+ 或者 NTFS 之类的文件格式，还需要安装相应的软件包。对于 HFS+ 格式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install hfsprogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后修改 netatalk 的共享设置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/netatalk/AppleVolumes.default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到里面已经默认共享了用户主目录。加上共享移动硬盘：&lt;code&gt;/media/pi/mydrive “mydrive”&lt;/code&gt;。重启 netatalk:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo service netatalk restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;硬盘睡眠&#34;&gt;硬盘睡眠&lt;/h2&gt;

&lt;p&gt;最后，硬盘不工作时应当让它进入睡眠，我就不啰嗦了，直接看&lt;a href=&#34;http://mkitby.com/2016/05/15/raspberry-pi-nas-manage-hdd-power/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;

&lt;p&gt;从树莓派里下载文件大概是 1MB/s，看个普通的视频足够了，凑合用吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>八月小结</title>
      <link>/post/2016-08-31-August-review/</link>
      <pubDate>Wed, 31 Aug 2016 21:05:13 -0500</pubDate>
      
      <guid>/post/2016-08-31-August-review/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;向春希菊苣学习，我也来尝试每月写一点总结吧，这样就知道自己和别人的差距怎么落下的了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;心态&#34;&gt;心态&lt;/h2&gt;

&lt;p&gt;近几个月大概是我这些年来心态波动最大的一个月了。初来美国念 Ph.D.，对美国社会的不适应、对读 Ph.D. 所需的心理准备不足、不靠谱学长的负面情绪渲染、以及外界的各种喧闹，合起来差点在八月中旬彻底把我击溃。基础学科学术界竞争的激烈性和工业界发展前景的不明朗是众所周知的事实，虽然我的专业物理暂且还没有生物、伪化学那么糟糕，但是也远远比不上数学和CS。当初申请时满腔热血认为自己能克服万难，然而当困难真的摆到自己面前时我却一下慌了阵脚（尤其是我的申请结果不好，来了一所偏保底的学校，hard 模式）。&lt;/p&gt;

&lt;p&gt;庆幸的是我最终在家人朋友的鼓励下把心态调整过来了。人在异乡，孤身一人，有时候一行简单的&lt;a href=&#34;http://i.imgur.com/3PB1Goz.png&#34;&gt;话语&lt;/a&gt;分量真的很重。&lt;/p&gt;

&lt;p&gt;虽然没办法在这个学校继续做量子信息方面的研究了，但是目前找到一个新来的导师做冷原子凝聚态，也算是我比较感兴趣的方向，和量子信息也有不少联系。在 Skype 上面试时觉得这个老师应该是比较勤奋的，希望不要太 push 吧，希望不要是个典型的变态“华人AP”。上课一个星期来也发现物理系老师都蛮友好的，尤其是教量子力学的教授，有一次还用中文和我说了句”谢谢“。&lt;/p&gt;

&lt;p&gt;虽然前景依然堪忧，但是希望自己将来能够更开朗乐观一点。&lt;/p&gt;

&lt;h2 id=&#34;学习&#34;&gt;学习&lt;/h2&gt;

&lt;p&gt;由于心态一直在过山车，完全没什么心思学习了，而且刚来的那会每天都有很多事情要办，没什么空余时间。Orientation 第一天的 Ph.D. qualificaiton exam 在心态最爆炸的那几天、满脑子将来怎么找工作怎么转行的情况下考过去了（可见和顶级学校比起来真的是不难），因而也就不用去修那些补充课程了，直接开始上核心课，电动力学和量子力学。其实到目前为止的内容本科都学过了，所以差不多也就在复习的状态。&lt;/p&gt;

&lt;p&gt;另一个开学考试科目英语自然是没有通过（若是我英语好一点当初就不至于据信14连了吧），于是要去修强制的英语口语课程。虽然一开始觉得这很浪费时间，每周有四个小时的课程和一个半小时的课下一对一辅导，上了一个星期下来，感觉还是蛮值得，助教和老师都很认真地帮我在找我口语里的问题和给出建议。然而到目前为止我的口语还是很捉急。&lt;/p&gt;

&lt;p&gt;真正让我不爽的是助教培训课，其实我前两年是 fellowship，根本不用做助教的，也被要求去上了。这课感觉就是典型的美国课，上课的内容是讨论和做演讲，课本什么的都是回家自己看，每周要看很多，还要写笔记。感觉很费时间而且没什么收获。（我是来学习物理的不是来学习教育学的啊靠北！）&lt;/p&gt;

&lt;h2 id=&#34;项目&#34;&gt;项目&lt;/h2&gt;

&lt;p&gt;生活再怎么艰难，看番还是必须的，尤其是看番能缓解疲劳。于是在这种需求拉动下在认真地研究了海外看B站新番的方案，读了 &lt;a href=&#34;https://github.com/m13253/BiliDan&#34;&gt;bilidan&lt;/a&gt; 的源码，并尝试用我喜欢的 Swift 重写了一遍。（不是我不愿意付费看正版，但是 crunchyroll 到现在还是 flash 播放器，人家 bilibili 的 HTML5 还带弹幕的播放器不知道比你高到哪里去了！）然而就在我出国那几天，B站把&lt;code&gt;X-Forwarded-For&lt;/code&gt;的方法封死了，一度认为自己七月份的成果全白费了。后来发现了 bilibilijj.com 这个网站，算是找到了解决方法。现在的方法是获取视频 cid，然后交给 bilibilijj.com 嗅探视频地址，解析 bilibilijj.com 网页，然后通过 Shadowsocks 把视频下载下来（防止 isp 起诉我下载版权视频），最后用 ffmpeg 连接 flv，用 mpv 观看。下面这个是把 xml 格式弹幕转换成 ass 的一个组件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Lencerf/Danmaku&#34;&gt;Danmaku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主程序就不放源码了，毕竟目前 bug 不少，只能算是够用水平。等我修得差不多再放到 github 上献丑吧。写这个程序时踩了相当多 Swift 2-&amp;gt;3 的坑，感觉苹果再不把 Swift 稳定下来真的药丸啊！&lt;/p&gt;

&lt;p&gt;除了对各类编程语言的浅尝辄止外，我一直想点一两个真正的CS技能点，然而数据结构和算法始终是找不到门路。CS科班的室友给我推荐了&lt;a href=&#34;https://www.gitbook.com/book/nju-ics/ics2016-programming-assignment/details&#34;&gt;这个项目&lt;/a&gt;。目前希望能利用本学期的课余时间，按照指引认真做一遍，这样会对计算机系统有点更深刻的理解吧。&lt;/p&gt;

&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;

&lt;p&gt;身处大农村，没车寸步难行。尤其是刚来几天，还算暑假，公交线路和班次都少，每天大概一个半小时耗在等公交上了。开学后住的公寓和学校间的直达公交开始运营了，感觉方便了很多。（然而去趟沃尔玛还是得等等等）&lt;/p&gt;

&lt;p&gt;美国的饭菜真的不习惯。小时候把汉堡当人间美味，然而现在吃了真的美国汉堡和三明治，我表示再也不想吃了。最近都是自己做，从来没有像现在一样觉得米饭和炒包菜是人间美味过！课程紧张的那几天中午饭就靠 Soylent 搞定，感觉 Drink 2.0 味道蛮好的。&lt;/p&gt;

&lt;p&gt;想写的还有很多，也许有空可以专门开一篇文章来写写我的一些见闻想法和思想观念的转变吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>曲面积分复习跳坑笔记</title>
      <link>/post/2016-07-11-notes-on-surface-integral/</link>
      <pubDate>Mon, 11 Jul 2016 01:05:13 +0800</pubDate>
      
      <guid>/post/2016-07-11-notes-on-surface-integral/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在复习曲面积分的时候发现对当年初学的真的没有怎么理解透，基本就是死背公式了，于是复习的时候踩了不少坑，特别是变换参数时雅可比行列式的理解。故将现在的理解记录下来以防忘记。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先从普通&lt;strong&gt;二重积分&lt;/strong&gt;出发。设想物理场景：求一块面密度为 $\rho_(x,y)$ 的不均匀板的质量 $m$。显然，
$$m=\iint_S\rho(x,y)dxdy,$$
$S$ 代表板面。当然板不一定是矩形，所以这个积分不一定好算。假设存在变换，
$$\begin{cases} x = x(u,v)\newline y = y(u,v)\end{cases}, u\in[a,b], v\in[c,d],$$
以 $u, v$ 为被积分参数，$m$ 的表达式为
$$\begin{equation}\label{m}
m=\int_a^bdu\int_c^d\rho(x(u,v),y(u,v))|J(u,v)|dv,
\end{equation}$$
$|J(u,v)|$ 是雅可比行列式的绝对值，而雅可比行列式的定义为
$$J(u,v)=\begin{vmatrix} \partial_ux &amp;amp; \partial_vx \newline \partial_uy &amp;amp; \partial_vy \end{vmatrix},$$
主要在于如何比较直观地理解雅可比行列式。看了知乎上&lt;a href=&#34;http://zhihu.com/question/29964930/answer/51632832&#34;&gt;这个回答&lt;/a&gt;后受到启发，现在的理解如下：在 $u, v$ 空间中，当 $u$ 从 $u_0$ 变化到 $u_0+du$ 时，$x, y$ 空间（下称“实空间”）中对应的点扫过一段弧长，这段弧长可以用向量 $d\vec{u}=(\frac{\partial x}{\partial u}du, \frac{\partial y}{\partial u}du)$ 来替代；同理 $v$ 从 $v_0$ 变化到 $v_0+dv$ 时对应实空间中的向量 $d\vec{v}=(\frac{\partial x}{\partial v}dv, \frac{\partial y}{\partial v}dv)$。因此 $u, v$ 空间中一个 $dudv$ 的面元对应了实空间中以 $d\vec{u}, d\vec{v}$ 这两个向量为邻边的平行四边形区域。当 $(u, v)$ 遍历其定义域时，这些小平行四边形能够覆盖 $x, y$ 的定义域。每个小平行四边形的面积是 $|d\vec{u}\times d\vec{v}|$，也就是 $|J|$，所以 $m$ 可以表达为：$$m \approx \sum\rho(x(u,v), y(u,v))|J|,$$ 求和变积分，也就是最初的表达式\ref{m}了。&lt;/p&gt;

&lt;p&gt;比普通二重积分复杂一点的是&lt;strong&gt;第一型曲面积分&lt;/strong&gt;。简单地说，普通二重积分中的板是一块平板，所以我们可以直接在平板上建立平面直角坐标系；第一型曲线积分中的板是一块曲面板，我们只能在外部建立空间直角坐标系然后用方程去描述曲面的形状。具体的表达式是：
$$m=\iint_S\rho(x,y,z)dS,$$
其中 $dS$ 是曲面 $S$ 上的一块面元。现在假设曲面可以用参数方程描述：
$$\begin{cases} x = x(u,v)\newline y = y(u,v)\newline z=z(u,v)\end{cases}, u\in[a,b], v\in[c,d],$$
$m$ 用对 $u, v$ 的积分表达为
$$m=\int_a^b du\int_c^d\rho(x(u,v),y(u,v),z(u,v))\sqrt{A^2+B^2+C^2}dv$$
式中的 $A, B, C$ 分别为
$$A=\begin{vmatrix} \partial_uy &amp;amp; \partial_uz \newline \partial_vy &amp;amp; \partial_vz \end{vmatrix},B=\begin{vmatrix} \partial_uz &amp;amp; \partial_ux \newline \partial_vz &amp;amp; \partial_vx \end{vmatrix}, C=\begin{vmatrix} \partial_ux &amp;amp; \partial_uy \newline \partial_vx &amp;amp; \partial_vy \end{vmatrix},$$
理解方式和前面是一样的，只是现在 $d\vec{u}$ 和 $d\vec{v}$ 是是三维矢量了，表达式分别是：
$$d\vec{u} =(\frac{\partial x}{\partial u}, \frac{\partial y}{\partial u}, \frac{\partial z}{\partial u})dv$$
$$d\vec{v} =(\frac{\partial x}{\partial v}, \frac{\partial y}{\partial v}, \frac{\partial z}{\partial v})dv$$
算一下 $|d\vec{u}\times d\vec{v}|$ 就能得到 $\sqrt{A^2+B^2+C^2}dudv$ 了。&lt;/p&gt;

&lt;p&gt;最后是相对最复杂的&lt;strong&gt;第二型曲面积分&lt;/strong&gt;。我们得换一个物理场景了：考虑电流密度场 $\vec{j}(x,y,z)$ 空间中一个曲面 $C(x,y,z)=0$，求通过曲面的电流强度 $I$。$I$ 的表达式不难写出：
$$I=\iint_C\vec{j}(x,y,z)\cdot d\vec{S},$$
其中 $d\vec{S}=\vec{e}_ndS$，$dS$ 是曲面上的面元，$\vec{e}_n$ 代表这一点面元的法向单位矢量。事实上把 $d\vec{S}$ 代入积分式中就能把第二型曲面积分转化成第一型曲面积分
$$I=\iint_C(\vec{j}(x,y,z)\cdot\vec{e}_n) dS,$$
此时被积分函数就是 $\vec{j}(x,y,z)\cdot\vec{e}_n$。为了求出曲面上每一点处的法矢 $\vec{e}_n$ 的表达式，我们需要利用曲面 $C$ 的参数表达式
$$\begin{cases} x = x(u,v)\newline y = y(u,v)\newline z=z(u,v)\end{cases}, u\in[a,b], v\in[c,d],$$
可以想象，曲面上某点 $(x,y,z)$ 处的法向单位矢量与该点对应的矢量 $d\vec{u}\times d\vec{v}$ 平行，但是有可能相同或相反，这个问题先放一边，我们可以把 $\vec{e}_n$ 写成
$$\vec{e}_n=\epsilon\frac{d\vec{u}\times d\vec{v}}{|d\vec{u}\times d\vec{v}|},$$
$\epsilon$ 可为 $\pm 1$，用于矫正方向。然后，和上面第一型曲线积分的处理方法一样，$I$ 可以表达为对 $u, v$ 的积分式
$$I=\iint_D(\epsilon\vec{j}(x,y,z)\cdot\frac{d\vec{u}\times d\vec{v}}{|d\vec{u}\times d\vec{v}|})|d\vec{u}\times d\vec{v}|=\iint_D\epsilon\vec{j}(x,y,z)\cdot (d\vec{u}\times d\vec{v}),$$
此时积分区域换成 $D$, 即 $u, v$ 的定义域，表明是对 $u, v$ 的积分。现在只剩确定 $\epsilon$ 的正负，这是个比较麻烦的问题。为了说清楚这一点，我们首先要注意一件事，二重积分在化为累次积分的过程中有一个问题，累次积分是多次单变量积分，单变量积分的结果与积分上下限的次序是有关的，交换积分上下限积分结果反号，而二重积分结果不应当与这种次序有关（从二重积分的定义就可以看出，二重积分中没有上下限次序这个概念）。或者说，单变量积分中，线元 $dx$ 可正可负，但是二重积分的面元 $dxdy$ 应当保证为正，所以事实上二重积分在化为累次积分的过程中默认要求积分上限比积分下限大。这个问题在第二型曲面积分中的体现就是 $\vec e_n$ 的指向，我们可以人为构造出曲面 $C$ 的两种参数表达式，使得算出来的 $d\vec{u}\times d\vec{v}$ 方向相反。为了避免这个问题就需要选合适的参数表达式，最保险的方案是，将曲面方程 $C(x,y,z)=0$ 中的一个变量反解出来，比如 $z$，将 $x, y$ 作为参数，曲面的参数式就是
$$\begin{cases} x = x\newline y = y\newline z=z(x,y)\end{cases}, $$
这样求出来的 $d\vec{u}\times d\vec{v}$ 总是指向我们通常约定的曲面的正侧，因此 $\epsilon$ 就可以取为 1（当然如果实际问题中确实是要沿着负侧积分，$\epsilon$ 就应当是 -1）。如果取了其他参数式，可能需要小心地先检验一下 $d\vec{u}\times d\vec{v}$ 的方向。&lt;/p&gt;

&lt;p&gt;最后，本文叙述中有些条件和前提略去了，比如 $x, y$ 和 $u, v$ 之间的变换应当满足的条件等等。不严谨之处，敬请见谅。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>卡诺热机的特别之处</title>
      <link>/post/2016-06-29-the-feature-of-carnot-engine/</link>
      <pubDate>Wed, 29 Jun 2016 01:05:13 +0800</pubDate>
      
      <guid>/post/2016-06-29-the-feature-of-carnot-engine/</guid>
      <description>&lt;p&gt;经典热力学中一个很重要的模型是卡诺热机（&lt;a href=&#34;https://en.wikipedia.org/wiki/Carnot_heat_engine&#34;&gt;Carnot engine&lt;/a&gt;），它工作在高温热源和低温热源之间，可以从高温热源吸收热量，然后输出功并在低温热源处释放热量；反过来也可以对卡诺热机输入功，达到将热量从低温热源搬运到高温热源的效果。因此卡诺机是可逆热机，并且是效率最高的热机，有如下卡诺定理&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:carnot&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:carnot&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;（&lt;a href=&#34;https://en.wikipedia.org/wiki/Carnot%27s_theorem_(thermodynamics)&#34;&gt;Carnot&amp;rsquo;s theorem&lt;/a&gt;）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Of all the heat engines working between two given temperatures, none is more efficient than a Carnot eigine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;但是最近重看 &lt;em&gt;Concepts in Thermal Physics&lt;/em&gt; [1]时我对卡诺定理的&lt;a href=&#34;https://en.wikipedia.org/wiki/Carnot%27s_theorem_(thermodynamics)#Proof&#34;&gt;证明过程&lt;/a&gt;产生了很大的困惑。教材上和维基上的证明方法是一致的，我不觉得这个证明方法有误，困惑在于，证明过程中似乎没有用到卡诺热机的特殊性质，没有哪里体现出一定要是卡诺热机，事实上用其它任意一个可逆热机放到这个证明过程中都可以证明该热机的效率是所有热机中最高的。&lt;/p&gt;

&lt;p&gt;直到我看到课本接下来介绍了一个卡诺定理的推论，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All reversible engines working between two temperatures have the same efficiency $\eta_{Carnot}$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;既然所有的可逆热机都可以达到卡诺热机的效率，是不是说明可逆热机只能是卡诺热机？或者可以通过某种变化等效为卡诺热机？。我搜寻脑海中的回忆，确定上新课时我没有得出过这个结论，必须仔细推敲一番。&lt;/p&gt;

&lt;p&gt;只有卡诺热机才是可逆热机吗？“除了绝热和等温过程外，还有其它可逆过程，选一些可逆过程连接成一个可逆循环就能构成一个可逆热机！”我很快发现这个想法有问题。&lt;/p&gt;

&lt;p&gt;首先明确热机逆过程的概念：保持其它配置不变，将能量流动箭头反向，吸热变放热，对外做功变成外部对热机做功。现在对 1mol 导热良好的理想气体，考察这样一个过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从初态 $(p_1,V_1)$ 等容加热到 $(p_2, V_1)$；&lt;/li&gt;
&lt;li&gt;从 $(p_2, V_1)$ 绝热膨胀到 $(p_3, V_2)$ ；&lt;/li&gt;
&lt;li&gt;从 $(p_3, V_2)$ 等温压缩至 $(p_1, V_1)$ 。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用这样一个过程可以构造一个热机，正过程和“逆过程”分别如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/carnot-engine/workflow.svg&#34; alt=&#34;图1 正过程和“逆过程”&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再画出对应的净效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/carnot-engine/pureEffect.svg&#34; alt=&#34;图2 正过程和“逆过程”的净效果&#34; /&gt;&lt;/p&gt;

&lt;p&gt;图1左边的过程中气体经历的每一步都是&lt;strong&gt;可逆变化&lt;/strong&gt;，但是构造出来的热机却不是&lt;strong&gt;可逆热机&lt;/strong&gt;，原因在于，第1步中气体的等容加热需要和高温热源 $T_2$ 接触才能完成，这是一个单纯的热量流动过程，热力学第二定律的克劳修斯表述禁止了其逆过程的发生：在没有额外辅助的条件下，气体不可能与高温热源 $T_2$ 接触的同时放热等容降温。但是气体本身经历的是一个可逆变化，只要气体再去和另一个低温热源接触，就能放热等容降温回到原来的状态。退一步说，如果一定要热机逆着循环运行（图1右），那么这一步中气体必须和低温热源 $T_1$ 接触，对应到图2中就是右边 $Q_1$ 的箭头只能指向 $T_1$ 而不可能指向 $T_2$。把图2和卡诺热机的正逆运行图对比，就能知道这种热机不可逆了。&lt;/p&gt;

&lt;p&gt;想清楚了上面这个例子后，再来看卡诺热机就不难理解为什么它是可逆的了。卡诺机和热源接触时经历的是等温过程，气体的温度和热源的温度是一样的，热力学第二定律只对有温度差时的热量流动方向做出了限制，但此处是等温的，只要把气体对外做功变成外部对气体做功，就能实现从吸热到放热的转变；而气体温度的变化是通过绝热过程完成的，绝热过程中没有熵变，也是可逆的。所以整个过程都是可逆的，卡诺机是一个可逆机。&lt;/p&gt;

&lt;p&gt;回到开始的问题，是不是只有卡诺热机才是可逆机呢？为什么？回答：不是，但是可逆热机中的过程只能由等温过程和绝热过程组成。因为，热机逆运行受到热力学第二定律的制约，尤其是热量流动箭头能否反向。要么不存在热量流动，即绝热过程；要么热量在相同温度物体间流动，即等温过程。涉及到其它过程时，必须要修改热机的结构才能逆运行（比如例子中接触高温热源变成低温热源）。卡诺循环是最简单的满足条件的循环过程，当然也可以用更多绝热和等温过程去构造更复杂的可逆热机。&lt;/p&gt;

&lt;p&gt;总结一下，在这个问题中有机个概念需要区分，&lt;strong&gt;可逆过程&lt;/strong&gt;、&lt;strong&gt;可逆机&lt;/strong&gt;和气体经历的&lt;strong&gt;可逆变化&lt;/strong&gt;并不是一回事。感想就是，把想法都写下来，对理清思路有很大帮助。想通了这些问题后，再回过头看看写下的东西，似乎全是废话，给读者见笑。但是自己没开窍前还是相当困惑的，写下来防止以后再一次忘记。&lt;/p&gt;

&lt;p&gt;如果读者有什么见解和想法，欢迎在留言区指正和一起讨论。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:carnot&#34;&gt;&lt;em&gt;Concepts in Thermal Physics, 2nd Edition&lt;/em&gt;, Stephen J.Blundell &amp;amp; Katherine M.Blundell.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:carnot&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Install Arch Linux with Plasma in Paralles Desktop</title>
      <link>/post/2016-06-09-Install-Archlinux-with-Plasma-in-ParallesDesktop/</link>
      <pubDate>Thu, 09 Jun 2016 17:08:08 +0800</pubDate>
      
      <guid>/post/2016-06-09-Install-Archlinux-with-Plasma-in-ParallesDesktop/</guid>
      <description>

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;下载 Arch Linux &lt;a href=&#34;https://www.archlinux.org/download/&#34;&gt;镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新建虚拟机。因为要安装 Plasma，建议内存至少1G。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;硬盘分区&#34;&gt;硬盘分区&lt;/h2&gt;

&lt;p&gt;启动虚拟机，开始安装，&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3siPvUb.png&#34; alt=&#34;由光盘镜像引导启动后的界面&#34; /&gt;&lt;/p&gt;

&lt;p&gt;首先需要对硬盘分区。输入命令 &lt;code&gt;cfdisk&lt;/code&gt; 可以打开半图形化的分区工具。首先&lt;code&gt;cfdisk&lt;/code&gt;会让选择分区表类型，选择第二种&lt;code&gt;dos&lt;/code&gt;。然后进入到分区界面，通过下面的菜单&lt;code&gt;New&lt;/code&gt;可以新建分区。我采用的分区方案如下，16G给系统，48G给文件，注意将系统区标记为&lt;code&gt;Bootable&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gZoKUgF.png&#34; alt=&#34;分区方案&#34; /&gt;&lt;/p&gt;

&lt;p&gt;完成后选择&lt;code&gt;Write&lt;/code&gt;将分区方案写入硬盘生效，然后&lt;code&gt;Quit&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;格式化硬盘分区&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkfs.ext4 /dev/sda1
mkfs.ext4 /dev/sda2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;挂载分区，sda1 挂载到&lt;code&gt;/mnt&lt;/code&gt;，sda2 挂载到到&lt;code&gt;/mnt/home&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mount /dev/sda1 /mnt
mkdir /mnt/home
mount /dev/sda2 /mnt/home
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装-arch-linux&#34;&gt;安装 Arch Linux&lt;/h2&gt;

&lt;p&gt;配置镜像源（country=你所在的地区代码）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o /etc/pacman.d/mirrorlist &amp;quot;https://www.archlinux.org/mirrorlist/?country=CN&amp;amp;protocol=http&amp;amp;ip_version=4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开 mirrorlist，反注释掉想要使用的镜像源&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nano /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装 Arch Linux&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacstrap /mnt base base-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qkazApk.png&#34; alt=&#34;安装过程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;完成后，进入新安装的系统进行配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;arch-chroot /mnt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先设置 Root 密码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;passwd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置时区，可以通过&lt;code&gt;date&lt;/code&gt;命令测试时区是否设置正确&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-she&#34;&gt;ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置主机名&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo Archlinux-PD &amp;gt; /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成语言配置。首先打开&lt;code&gt;/etc/locale.gen&lt;/code&gt;，反注释掉所需要的语言（en_US.UTF8、zh_CN.UTF8），然后执行命令&lt;code&gt;locale-gen&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nano /etc/locale.gen
locale-gen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装启动引导 grub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S grub
grub-install /dev/sda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置 grub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkinitcpio -p linux
grub-mkconfig -o /boot/grub/grub.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hQt0Son.png&#34; alt=&#34;配置 grub&#34; /&gt;&lt;/p&gt;

&lt;p&gt;开启网络，然后退出新系统，回到&lt;code&gt;arch-root&lt;/code&gt;命令之前的界面。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl enable dhcpcd
exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成 fstab&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;genfstab /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;umount 挂载的磁盘，重启虚拟机。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;umount /mnt/home
umount /mnt
reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装-plasma&#34;&gt;安装 Plasma&lt;/h2&gt;

&lt;p&gt;如果一切顺利重启后可以看到 grub 启动菜单&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zin9rgS.png&#34; alt=&#34;grub 启动菜单&#34; /&gt;&lt;/p&gt;

&lt;p&gt;进入新安装好的系统，以 root 用户登录，密码就是之前执行&lt;code&gt;passwd&lt;/code&gt;命令时输入的密码。&lt;/p&gt;

&lt;p&gt;先测试一下网络连接情况&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ping -c 5 archlinux.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果连接不通，可以尝试手动开启网络&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl start dhcpcd
ip addr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新一下软件包，然后开始安装 Plasma 和其它必要的软件包。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -Syu
pacman -S xorg plasma zsh git konsole firefox dolphin alsa-utils 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解释一下，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;xorg 是 X 窗口服务器，plasma 即是 KDE5&lt;/li&gt;
&lt;li&gt;git 和 zsh 没什么好说的&lt;/li&gt;
&lt;li&gt;konsole 是 KDE 下的默认终端模拟器，firefox是火狐浏览器，dolphin 是文件管理器&lt;/li&gt;
&lt;li&gt;alsa-utils 是声音模块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安装完成后，配置一下 X（下面的命令注意 X 要大写）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Xorg -configure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的命令会生成一份配置模版&lt;code&gt;/root/xorg.conf.new&lt;/code&gt;，用编辑器打开。&lt;/p&gt;

&lt;p&gt;因为我用的是非 retina 屏幕的 MBP 13， 所以在&lt;code&gt;Section &amp;quot;Screen&amp;quot;&lt;/code&gt;下的&lt;code&gt;Section &amp;quot;Display&amp;quot;&lt;/code&gt;中添加一行&lt;code&gt;Modes &amp;quot;1280x800&amp;quot;&lt;/code&gt;就好了。保存，将配置文件移动到合适的位置，然后启用&lt;code&gt;sddm&lt;/code&gt;服务。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mv /root/xorg.conf.new /etc/X11/xorg.conf
systemctl enable sddm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加用户并设置密码，把 yourname 换成你喜欢的名字&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;useradd -m -G wheel -s /usr/bin/zsh yourname
passwd yourname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把自己添加到sudoer中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nano /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在末尾添加一行&lt;code&gt;yourname ALL=(ALL) ALL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;把自己添加到audio用户组中，这样可以开启声音&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gpasswd -a yourname audio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装一些不错的字体&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S ttf-arphic-uming ttf-arphic-ukai ttf-bitstream-vera adobe-source-han-sans-otc-fonts ttf-fira-sans
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除没什么用的媒体中心&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo pacman -R plasma-mediacenter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到此基本上就完成了，reboot 之后应该就能看到赏心悦目的 Plasma 界面了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6sIFdh5.png&#34; alt=&#34;Plasma 真漂亮啊！&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以上过程为本人安装成果的整理记录，可能有疏漏，不一定适用于读者的情况。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;字体的问题还没有完全解决，尤其是终端下的中文字体。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parallels Tools 似乎和 Arch Linux 不太兼容的样子，虽然能安装上去，但是文件共享一直有问题。具体安装细节可能之后再补充。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开启 ssh 服务&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S openssh
systemctl enable sshd.service
systemctl start sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;ip route&lt;/code&gt;可以查看本机IP，必要时可以从 OS X 端 ssh 登陆到 Arch，也可以用&lt;code&gt;scp&lt;/code&gt;往虚拟机里传文件&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Last but maybe the most important, for some Asian users,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S shadowsocks-libev
nano /etc/shadowsocks/config.json
systemctl enabnle shadowsocks-libev@config
systemctl start shadowsocks-libev@config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.columbia.edu/~jae/4118-LAST/arch-setup-2015-1.html&#34;&gt;Setting up an Arch Linux VM in VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube video: &lt;a href=&#34;https://www.youtube.com/watch?v=Wqh9AQt3nho&#34;&gt;How to Install Arch Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Youtube video: &lt;a href=&#34;https://www.youtube.com/watch?v=okct6NwqF_Y&#34;&gt;How to Install Arch Linux 2016 + KDE Plasma 5 + Open-VM-Tools on VMware Player Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yzalog.tk/ss-via-stunnel/&#34;&gt;Yza Log&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org&#34;&gt;ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linuxtoy.org/archives/archlinux-guide.html&#34;&gt;打造完美的 Linux 桌面 — Archlinux 2007.08-2 (电子版)
&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Embed figures of eps format in LaTeX papers -- with dvips</title>
      <link>/post/2016-01-09-Embed-figures-of-eps-format-in-LaTeX-papers-with-dvips/</link>
      <pubDate>Sat, 09 Jan 2016 17:08:08 +0800</pubDate>
      
      <guid>/post/2016-01-09-Embed-figures-of-eps-format-in-LaTeX-papers-with-dvips/</guid>
      <description>&lt;p&gt;At the end of my earlier &lt;a href=&#34;/post/2015-05-17-Embed-figures-of-eps-format-in-LaTeX-files/&#34;&gt;post&lt;/a&gt; on embedding figures of eps format into LaTeX papers, I wrote that we may get an ugly reference article list if &lt;code&gt;dvips&lt;/code&gt; is used to generate the PDF file, which is caused by the package &lt;code&gt;hyperref&lt;/code&gt;. Certainly, removing &lt;code&gt;\usepackage{hyperref}&lt;/code&gt; is the most simple way to solve this problem. But what if we need them two simultaneously?&lt;/p&gt;

&lt;p&gt;Today when I am trying PSTricks, I find &lt;code&gt;dvipdfmx&lt;/code&gt; is unable to generate correct figures, while dvips is able. I suspect that PSTricks needs the PostScript of the article, while dvipdfmx generates the PDF copy from the dvi copy directly.&lt;/p&gt;

&lt;p&gt;The problem is finally solved when I find &lt;a href=&#34;http://tex.stackexchange.com/questions/121837/hyperref-wrong-dvi-mode-driver-option-dvips-hyperref-because-pdftex-or-luat&#34;&gt;this question&lt;/a&gt; on stackexchange. Some parameters are needed when hyperref is used with dvips:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[dvips,breaklinks]{hyperref}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;But, why not use XeLaTeX to compile the source file?&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example of differences between compilers</title>
      <link>/post/2016-01-03-an-example-of-differences-between-compilers/</link>
      <pubDate>Sun, 03 Jan 2016 23:40:04 +0800</pubDate>
      
      <guid>/post/2016-01-03-an-example-of-differences-between-compilers/</guid>
      <description>&lt;p&gt;For the code fragment below,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;//ch1.c
#include &amp;quot;stdio.h&amp;quot;
int main(int argc, char const *argv[]) {
    int a = 1;
    int c = (a=a * 2) + (a = a + 3);
    printf(&amp;quot;a = %d, c = %d.\n&amp;quot;, a, c);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if &lt;code&gt;gcc&lt;/code&gt; is used to compile it, there are no errors or warnings. Run the binary file and we will get:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a = 5, c = 10.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, if I use &lt;code&gt;clang&lt;/code&gt; to compile the codes, there will be a warning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ch1.c:6:15: warning: multiple unsequenced modifications to &amp;lsquo;a&amp;rsquo; [-Wunsequenced]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run the generated file:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a = 5, c = 7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Personally, I think clang is better than gcc in dealing this problem. But why I, the programmer, write such unreadable codes?!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>brew with a socks5 proxy</title>
      <link>/post/2015-10-03-brew-with-a-socks5-proxy/</link>
      <pubDate>Sat, 03 Oct 2015 22:47:28 +0800</pubDate>
      
      <guid>/post/2015-10-03-brew-with-a-socks5-proxy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Finally, I find the right way to use homebrew.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;set a socks proxy with git for the http transport&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global http.proxy &#39;socks5://127.0.0.1:1081&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;set a socks proxy for curl: just add &lt;code&gt;proxy=socks5://127.0.0.1:1081&lt;/code&gt; to &lt;code&gt;~/.curlrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Too much time has been wasted because of the poor network.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Watch Video on Bilibili via bilidan.py on OS X</title>
      <link>/post/2015-09-23-watch-video-using-bilidan/</link>
      <pubDate>Wed, 23 Sep 2015 19:11:25 +0800</pubDate>
      
      <guid>/post/2015-09-23-watch-video-using-bilidan/</guid>
      <description>&lt;p&gt;Install &lt;a href=&#34;http://brew.sh&#34;&gt;homebrew&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install &lt;code&gt;python3&lt;/code&gt;, &lt;code&gt;ffmpeg&lt;/code&gt; and &lt;code&gt;mpv&lt;/code&gt; using &lt;code&gt;homebrew&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install python3 ffmpeg Caskroom/cask/mpv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the python script bilidan.py&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/m13253/BiliDan.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let &lt;code&gt;bilidan.py&lt;/code&gt; executable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;chmod u+x BiliDan/bilidan.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the terminal and run the following codes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;BiliDan/bilidan.py http://www.bilibili.com/video/av715519/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can watch the video without Flash Player!&lt;/p&gt;

&lt;p&gt;Tips: you may need to wait the mpv player for some minutes the first time you run the codes above. Just be patient.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/m13253&#34;&gt;m13253&lt;/a&gt; for the projects &lt;a href=&#34;https://github.com/m13253/BiliDan&#34;&gt;BiliDan&lt;/a&gt; and &lt;a href=&#34;https://github.com/m13253/danmaku2ass&#34;&gt;danmaku2ass&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make unix2doc a system service of OS X</title>
      <link>/post/2015-06-02-small-trick-unix2dos-as-service/</link>
      <pubDate>Tue, 02 Jun 2015 00:32:49 +0800</pubDate>
      
      <guid>/post/2015-06-02-small-trick-unix2dos-as-service/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Revising academic papers is really a hard work. What makes things worse is that WinEdit used by my mentor is only able to open .tex files with &lt;code&gt;CRLF&lt;/code&gt; line breaks while TeXShop.app uses &lt;code&gt;LF&lt;/code&gt; as a line ending.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unix, on which OS X is based, uses &lt;code&gt;LF&lt;/code&gt; as the default line break, different from Windows. Although I can use TextWrangle.app to convert text files between the two formats, but I really don&amp;rsquo;t like TextWrangle. (Sublime Text is wonderful!!!)&lt;/p&gt;

&lt;p&gt;So I find unix2dox, a command line tool that is developed to &amp;ldquo;convert text between DOS, UNIX, and Mac formats&amp;rdquo;. With Automator, the problem can be better solved.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install unix2dos
&lt;code&gt;brew install unix2dos&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new service in Automator as follow
&lt;img src=&#34;http://ww4.sinaimg.cn/large/eb7f99fcgw1etdcio105aj20h00dfwht.jpg&#34; alt=&#34;Automator script&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Have a try!
&lt;img src=&#34;http://ww2.sinaimg.cn/large/eb7f99fcgw1etdcmh4mmtj207c06cdg5.jpg&#34; alt=&#34;unix2dos in the context menu&#34; /&gt;.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Embed figures of eps format in LaTeX papers</title>
      <link>/post/2015-05-17-Embed-figures-of-eps-format-in-LaTeX-files/</link>
      <pubDate>Sun, 17 May 2015 09:07:14 +0800</pubDate>
      
      <guid>/post/2015-05-17-Embed-figures-of-eps-format-in-LaTeX-files/</guid>
      <description>&lt;p&gt;Usually, I use XeLaTeX to write articles instead of LaTeX, since the former is able to generate PDF files directly with a faster speed and an excellent support for Chinese characters. However, recently I have no choice but to use LaTeX again, since LaTeX is preferred by APS. Luckily, academic papers often contains no Chinese characters, thus I don&amp;rsquo;t need to use the terrible CJK package.&lt;/p&gt;

&lt;p&gt;Now to generate a PDF format copy, the shell commands are&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;latex paper.tex;
bibtex peper;
latex peper;
latex paper;
dvipdfmx paper.dvi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another problem is about the figure. APS recommend eps format for the figure files. But dvipdfmx does not support eps format. So I got blanks at the positions where the figures should be placed. Although dvipdfmx can not directly handle eps files, it can temporarily call Ghostscript to transform eps files into PDF format when generating the paper&amp;rsquo;s PDF copy. PDF format is supported by dvipdfmx. Unluckily, Ghostscript is generally not installed in OS X and I wasted a whole morning struggle with the horrible blanks.&lt;/p&gt;

&lt;p&gt;Installing Ghostscript is easy, just brew it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install ghostscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, parameter &lt;code&gt;[dvipdfmx]&lt;/code&gt; is indispensable if package hyperref is used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[dvipdfmx]{hyperref}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Certainly, PDF copy can be generated by other commands besides dvipdfmx. For example,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dvips paper.dvi
ps2pdf paper.ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But you may get an ugly reference article list. :(&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>设置 Mathematica 的默认字号</title>
      <link>/post/2015-02-25-set-default-fontsize-for-mathematica/</link>
      <pubDate>Wed, 25 Feb 2015 17:22:43 +0800</pubDate>
      
      <guid>/post/2015-02-25-set-default-fontsize-for-mathematica/</guid>
      <description>&lt;p&gt;Mathematica 的默认字体看起太小，尤其我的 MacBook 没有配 Retina 屏幕，看起来伤眼睛。&lt;/p&gt;

&lt;p&gt;在 Mathematica 的 Format-&amp;gt;Option Inspector 中以&lt;code&gt;fontsize&lt;/code&gt;搜索&lt;code&gt;Global Preference&lt;/code&gt;，修改&lt;code&gt;12&lt;/code&gt;为&lt;code&gt;16&lt;/code&gt;。但是，尝试多次，重启 Mathematica 也无效。&lt;del&gt;要对 Mathematica 粉转黑了！&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;最后，在 &lt;a href=&#34;http://mathematica.stackexchange.com/questions/59283/changing-the-default-font-size&#34;&gt;StackExchange&lt;/a&gt; 找到了一个曲线救国的方法：NotebookOptions-&amp;gt;Display Options-&amp;gt;Magnification，把&lt;code&gt;1&lt;/code&gt;修改为&lt;code&gt;1.5&lt;/code&gt;或其他，即把整个 notebook 的显示全局放大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ww4.sinaimg.cn/large/eb7f99fcgw1eplqnlb507j20l80gxju9.jpg&#34; alt=&#34;设置全局放大&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a template of beamer</title>
      <link>/post/2014-12-01-a-beamer-template/</link>
      <pubDate>Mon, 01 Dec 2014 00:17:10 +0800</pubDate>
      
      <guid>/post/2014-12-01-a-beamer-template/</guid>
      <description>&lt;p&gt;Just a template of beamer&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;%!Mode:: &amp;quot;TeX:UTF-8&amp;quot;
%!TEX program = xelatex
\documentclass[10pt]{beamer}
%[]中加t可以使内容从顶部开始

%英文字体
\usepackage{booktabs}
\usepackage{fontspec,xltxtra,xunicode}
\defaultfontfeatures{Mapping=tex-text}
\setromanfont[Mapping=tex-text]{TimesNewRomanPSMT}
\setsansfont[Scale=MatchLowercase,Mapping=tex-text]{Gill Sans}
\setmonofont[Scale=MatchLowercase]{Courier}

%中文设置
\usepackage[slantfont,boldfont]{xeCJK}
\setCJKmainfont[BoldFont=AdobeHeitiStd-Regular]{AdobeHeitiStd-Regular}
\setCJKfamilyfont{Song}{AdobeSongStd-Light}
\setCJKfamilyfont{Hei}{AdobeHeitiStd-Regular}
\setCJKfamilyfont{Kai}{AdobeKaitiStd-Regular}
\setCJKfamilyfont{Hupo}{STHupo}
\setCJKfamilyfont{FS}{AdobeFangsongStd-Regular}
\XeTeXlinebreaklocale &amp;quot;zh&amp;quot; %中文断行用

%beamer配置
\usetheme{Luebeck}%
\setbeamertemplate{headline}{}
\setbeamertemplate{navigation symbols}{} %去掉导航条
\usefonttheme{serif}
%加上sectionpage
\AtBeginSection[]{
\begin{frame}
\begin{center}
\begin{beamercolorbox}[sep=8pt,center]{part title}
\usebeamerfont{part title}{\large \insertsection}
\end{beamercolorbox}
\end{center}
\end{frame}
}

%数学设置
\usepackage{amssymb}
\usepackage{amsmath}

%插图
\usepackage{graphicx}

%作图
\usepackage{pgf,tikz}
\usetikzlibrary{arrows}

\title[简略标题]{titlepage上显示的完整标题}
\author[作者]{titlepage上显示的完整作者信息，可以包括邮件地址}
\institute[简略机构]{titlepage上要显示的完整机构}
\date{2014.mm.dd}

\begin{document}
%标题页
\frame{\titlepage}
%outline
\section[Outline]{}
\frame{
\frametitle{主要内容}
\tableofcontents
}
%正文
\section{章节1}
\frame   %[allowframebreaks]似乎与\pause冲突
{\frametitle{页标题}
		\begin{itemize}
		\item 信息1
		\pause
		\item 信息2
		\only&amp;lt;3&amp;gt;{
		\item 信息3}
		\item 信息4
		\end{itemize}
}

\section{章节2}
\frame[allowframebreaks]{
\frametitle{页标题}
}

%感谢页
\frame{
 \begin{center}
 \begin{beamercolorbox}[sep=8pt,center]{part title}
\usebeamerfont{part title}{\huge Thank You!}
\end{beamercolorbox}
 \end{center}
}

\end{document}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>配置 Sublime Text 的 LaTeX 写作环境</title>
      <link>/post/2014-11-20-latex-with-sublime-text-3/</link>
      <pubDate>Thu, 20 Nov 2014 23:32:35 +0800</pubDate>
      
      <guid>/post/2014-11-20-latex-with-sublime-text-3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;又开始折腾了。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装-latextools&#34;&gt;安装 LaTeXTools&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;View -&amp;gt; Show Console，打开终端界面，将 Package Control &lt;a href=&#34;https://sublime.wbond.net/installation&#34;&gt;官网&lt;/a&gt;给出的代码复制粘贴进终端，回车完成 Package Control 的安装。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Command-Shift-P&lt;/code&gt;调出命令窗口，输入&lt;code&gt;Install&lt;/code&gt;，等待一会，之后输入&lt;code&gt;LaTeXTools&lt;/code&gt;，回车完成安装，时常取决于网络。&lt;/li&gt;
&lt;li&gt;安装 &lt;a href=&#34;http://skim-app.sourceforge.net/&#34;&gt;Skim&lt;/a&gt;，用于预览编译好的PDF文件。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;初始设置&#34;&gt;初始设置&lt;/h2&gt;

&lt;h3 id=&#34;latextools&#34;&gt;LaTeXTools&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;初始化：按下&lt;code&gt;Command-Shift-P&lt;/code&gt;，输入&amp;rdquo;latextools&amp;rdquo;，选择&amp;rdquo;LaTeXTools:Reconfigure&amp;hellip;&amp;ldquo;，回车。
&lt;img src=&#34;http://ww2.sinaimg.cn/large/eb7f99fcgw1emibebpra4j20jm0d5n05.jpg&#34; alt=&#34;LaTeXTools 的初始化&#34; /&gt;&lt;/li&gt;
&lt;li&gt;设置编译时输出详细日志：前往&lt;code&gt;~/Library/Application Support/Sublime Text 3/Packages/User/&lt;/code&gt;，打开&lt;code&gt;LaTeXTools.sublime-settings&lt;/code&gt;，将&lt;code&gt;&amp;quot;display_log&amp;quot; : false,&lt;/code&gt;改为&lt;code&gt;&amp;quot;display_log&amp;quot; : true,&lt;/code&gt;。这样编译时心里有个底，看屏幕上输出一段一段高端大气的代码然后生成精美的 paper 的时候的快感怎么能少？&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置默认使用 XeLaTeX 编译文件：虽然可以去修改&lt;code&gt;LaTeXTools.sublime-settings&lt;/code&gt;,不过最简单安全的方法还是在自己的 TeX 源文件开头加上&lt;code&gt;%!TEX program = xelatex&lt;/code&gt;，修改一下自己的模板就一劳永逸了，难道每次都从输入&lt;code&gt;\begin{document}&lt;/code&gt;开始？&lt;/p&gt;

&lt;h3 id=&#34;skim&#34;&gt;Skim&lt;/h3&gt;

&lt;p&gt;在 Skim 的选项-同步中，不要勾选“检查文件变化”，“同步支持”选择“Sumlime Text”
&lt;img src=&#34;http://ww2.sinaimg.cn/large/eb7f99fcgw1emibc7nfn6j20f00bxmyg.jpg&#34; alt=&#34;Skim 设置&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;skim-与-sublime-text-之间的跳转按键&#34;&gt;Skim 与 Sublime Text 之间的跳转按键&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Skim：&lt;code&gt;Command-Shift-单击&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sublime Text：&lt;code&gt;Command-L&lt;/code&gt;,松开&lt;code&gt;Command&lt;/code&gt;，迅速按下&lt;code&gt;J&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
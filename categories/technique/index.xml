<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technique on Lencerf&#39;s Walk</title>
    <link>https://lencerf.github.io/categories/technique/</link>
    <description>Recent content in Technique on Lencerf&#39;s Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Jan 2018 18:45:28 -0500</lastBuildDate>
    
        <atom:link href="https://lencerf.github.io/categories/technique/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>给文章加上一个剧透警示</title>
      <link>https://lencerf.github.io/post/2018-01-06-add-a-warning-dialog-box-to-posts/</link>
      <pubDate>Sat, 06 Jan 2018 18:45:28 -0500</pubDate>
      
      <guid>https://lencerf.github.io/post/2018-01-06-add-a-warning-dialog-box-to-posts/</guid>
      <description>
      
      <![CDATA[<p>最近玩了《<a href="http://store.steampowered.com/app/206440/To_the_Moon/">To the Moon</a>》这款游戏，很想写写玩后感，但是这样一款胜在剧情的游戏，写感想不可避免会剧透。文章还没动笔写，我先来折腾一下怎样给博客文章加上有效的剧透警示。</p>

<p>基本思路是刚打开网页时，把文章正文盖住，并显示一个提示剧透的对话框，只有读者选择继续阅读以后，才显示文章内容。得益于 Hugo 强大的自定义能力，实现这个效果还是不难的。</p>

<p>首先给含有剧透的文章加上一个<code>warning</code>属性，包含了警示对话框所提示的文字：</p>

<pre><code>warning: &quot;以下内容含有《To the Moon》的剧透，如需继续阅读，点击下面的按钮。&quot;
</code></pre>

<p>之后修改 Hugo 的模版。文章正文包含在<code>article</code>标签里面，所以在渲染时，检查一下文章有没有<code>warning</code>属性，如果有，就默认加上模糊效果：</p>

<pre><code class="language-html">{{ if .Params.warning }}
&lt;article class=&quot;section&quot; style=&quot;filter:blur(8px);&quot;&gt;
{{ else }}
&lt;article class=&quot;section&quot;&gt;
{{ end }}
</code></pre>

<p>然后，文章有剧透时，显示一个对话框，警示有剧透。</p>

<pre><code class="language-html">{{ if .Params.warning }}
&lt;div id=&quot;indicator&quot; align=&quot;center&quot;&gt;
    &lt;div id=&quot;warning&quot;&gt;
        &lt;p&gt;{{.Params.warning}}&lt;/p&gt;
        &lt;a onclick=&quot;javascript:showContent();&quot; href=&quot;#&quot; class=&quot;button&quot; &gt;
        &lt;i class=&quot;fa fa-key&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
        &gt;&gt;&gt; 
        &lt;i class=&quot;fa fa-lock&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
        &lt;/a&gt;
    &lt;/div&gt;
&lt;/div&gt;
{{ end }}
</code></pre>

<p>对应的 CSS</p>

<pre><code class="language-css">#indicator {
    display: block;
    position: fixed;
    margin-top: 20%;
    z-index: 1;
    width: 100%;
    height: 100%;
    left: 0em;
    top: 0em;
}
#warning {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 60%;
    max-width: 720px;
}
</code></pre>

<p>此外，在读者选择继续阅读以后，用 js 关闭对话框并去掉正文部分的模糊效果：</p>

<pre><code class="language-js">var showContent = function() {
    document.getElementsByTagName(&quot;article&quot;)[0].setAttribute(&quot;style&quot;, &quot;filter: none;&quot;);
    document.getElementById(&quot;indicator&quot;).setAttribute(&quot;style&quot;, &quot;display: none;&quot;);
}
</code></pre>

<p>当然这样是不够的，因为，如果有读者是通过订阅 RSS 阅读本文的，RSS 阅读器会直接把内容显示，屏蔽剧透就失效了。好吧我知道本站没什么人访问，更没什么人订阅 RSS，我自己都好几年没打开 RSS 阅读器了。出于精益求精的原则，我还是修改一下 Hugo 的<a href="https://gohugo.io/templates/rss/#the-embedded-rss-xml">默认 RSS 模版</a>，把读者引导到网页上。</p>

<pre><code class="language-xml">&lt;description&gt;
{{ if not .Params.warning }}
{{ .Summary | html }}
{{ else }}
&lt;p&gt;View the original webpage: {{ .Permalink }}&lt;/p&gt;
{{end}}
&lt;/description&gt;
</code></pre>

<p>最终效果可见此文：<a href="/post/2018-01-05-to-the-moon-review">《〈To the Moon〉玩后感》</a>（如果显示404，说明我还没写完，或者坑了<a href="https://bgm.tv/img/smiles/tv/15.gif">#bgm38</a>）以及 <a href="/post/index.xml">rss</a> 。</p>
]]>
      
      </description>
    </item>
    
    <item>
      <title>VSCode extension for Beancount</title>
      <link>https://lencerf.github.io/post/2017-03-10-vscode-beancount/</link>
      <pubDate>Sat, 11 Mar 2017 04:22:39 +0000</pubDate>
      
      <guid>https://lencerf.github.io/post/2017-03-10-vscode-beancount/</guid>
      <description>
      
      <![CDATA[<p>Homepage: <a href="https://marketplace.visualstudio.com/items?itemName=Lencerf.beancount">Beancount on Marketplace</a></p>

<p>Installation: <code>ext install beancount</code></p>

<p>Source Code: <a href="https://github.com/Lencerf/vscode-beancount">Lencerf/vscode-beancount</a></p>

<p>This is a simple VSCode extension for <a href="http://furius.ca/beancount/">Beancount</a>, with the following features:</p>

<ul>
<li>Syntax highlight,</li>
<li>Decimal point alignment,</li>
<li>Current time quick insertion,</li>
<li>Auto indent for a new posting record.</li>
</ul>

<p>I wish to thank Chris for elaborating how to <a href="http://www.chrisstead.com/archives/1082/visual-studio-code-extensions-editing-the-document/">programmatically modify document contents</a> and Martin for sharing the Beancount <a href="https://github.com/draug3n/sublime-beancount/blob/master/beancount.tmLanguage">sytax file</a> with me.</p>

<p>I started making this extension after I tried VSCode for one day. Previously I really did not like Electron Apps, perhaps because of <a href="https://github.com/poooi/poi">POI</a> for KanColle. POI slowed down my Mac and caused the fan spin fast. Certainly, KanColle is based on Flash. So my Mac became even hotter. I also tried <a href="http://atom.io">Atom</a> before. It also resulted in heats. Several days ago, after reading a post on VSCode, I downloaded it and found it is really good. At least, VSCode is fast and &ldquo;cool&rdquo;(literally) and its <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python">Python</a> extension made me surprised. Writing Python in VSCode is just as pleasant as writing C# in Visual Studio. I can not bear the response delay of MacVim plus YouCompleteMe any more. So I decide to switch to VSCode.</p>

<p>But I did not find any existing VSCode extensions for Beancount. Although the syntax of Beancount is very simple, I still want a function to automatically align decimal points of commodities. That&rsquo;s why I make this extension, although at the same time I much finish Quantum Mechanics 2 take-home midterm.</p>

<p>VSCode changes my opinions of Electron Apps, Javascript, and Microsoft. Actually now I think my bad impression on Javascript may just come from the fact that I have never written any Javascript codes by myself.</p>
]]>
      
      </description>
    </item>
    
    <item>
      <title>launchd 和 click</title>
      <link>https://lencerf.github.io/post/2016-12-15-launchd-and-click/</link>
      <pubDate>Thu, 15 Dec 2016 10:16:18 -0500</pubDate>
      
      <guid>https://lencerf.github.io/post/2016-12-15-launchd-and-click/</guid>
      <description>
      
      <![CDATA[<p>起因是看了一篇介绍 <a href="http://furius.ca/beancount/">Beancount</a> 的<a href="https://wzyboy.im/post/1063.html">博文</a>后，我就变成了数豆狂魔，大概是心底某种控制欲被激发了出来，没事就喜欢打开 <a href="https://github.com/beancount/fava">fava</a> 研究自己那点生活补贴流向哪里了。每次开 fava 前都需要在终端里现开启之，有点麻烦，于是我就想让它一直运行在后台。在 macOS 上开启一个程序并让它一直运行在后台的方法自然是用 launchd，我很快就写好了配置文件：</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
  &lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;lencerf.fava&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
      &lt;string&gt;/usr/local/bin/fava&lt;/string&gt;
      &lt;string&gt;/Users/Lencerf/Dropbox/Application Data/BeanCount/main.bean&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
  &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>然而 <code>launchctl load fava.plist</code> 后在浏览器里访问 <code>http://localhost:5000/</code> 却毫无反应。完全想不出问题出在哪里，本着控制变量的原则，我先尝试一下 bean-web。把 <code>/usr/local/bin/fava</code> 换成 <code>/usr/local/bin/bean-web</code> 后访问 <code>http://localhost:8080/</code>，可以打开 bean-web 页面，说明问题在 fava 身上。</p>

<p>但是 fava.plist 加载之后 fava 运行在后台，看不到任何输出信息，如何 debug 呢？Google 之后找到了办法，<a href="http://serverfault.com/questions/183589/how-do-i-activate-launchd-logging-on-os-x">这个页面</a>上提供了几个解决办法，我采用的第二个办法，指定输出到文件，在上面的 plist 文件中加入几个键值：</p>

<pre><code class="language-xml">&lt;key&gt;StandardOutPath&lt;/key&gt;
&lt;string&gt;/path/to/logfile.log&lt;/string&gt;
&lt;key&gt;StandardErrorPath&lt;/key&gt;
&lt;string&gt;/path/to/error.log&lt;/string&gt;
</code></pre>

<p>于是当我打开再次 <code>launchctl load fava.plist</code> 后，在 error.log 中看到了大量这样的输出：</p>

<pre><code class="language-shelloutput">Traceback (most recent call last):   File &quot;/usr/local/bin/fava&quot;, line 11, in &lt;module&gt;
    sys.exit(main())
  File &quot;/usr/local/lib/python3.5/site-packages/click/core.py&quot;, line 716, in __call__
    return self.main(*args, **kwargs)
  File &quot;/usr/local/lib/python3.5/site-packages/click/core.py&quot;, line 675, in main
    _verify_python3_env()
  File &quot;/usr/local/lib/python3.5/site-packages/click/_unicodefun.py&quot;, line 119, in _verify_python3_env
    'mitigation steps.' + extra)
RuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment.  Either run this under Python 2 or consult http://click.pocoo.org/python3/ for mitigation steps.

This system lists a couple of UTF-8 supporting locales that
you can pick from.  The following suitable locales where
discovered: af_ZA.UTF-8, am_ET.UTF-8, be_BY.UTF-8, bg_BG.UTF-8, ca_ES.UTF-8, cs_CZ.UTF-8, da_DK.UTF-8, de_AT.UTF-8, de_CH.UTF-8, de_DE.UTF-8, el_GR.UTF-8, en_AU.UTF-8, en_CA.UTF-8, en_GB.UTF-8, en_IE.UTF-8, en_NZ.UTF-8, en_US.UTF-8, es_ES.UTF-8, et_EE.UTF-8, eu_ES.UTF-8, fi_FI.UTF-8, fr_BE.UTF-8, fr_CA.UTF-8, fr_CH.UTF-8, fr_FR.UTF-8, he_IL.UTF-8, hr_HR.UTF-8, hu_HU.UTF-8, hy_AM.UTF-8, is_IS.UTF-8, it_CH.UTF-8, it_IT.UTF-8, ja_JP.UTF-8, kk_KZ.UTF-8, ko_KR.UTF-8, lt_LT.UTF-8, nl_BE.UTF-8, nl_NL.UTF-8, no_NO.UTF-8, pl_PL.UTF-8, pt_BR.UTF-8, pt_PT.UTF-8, ro_RO.UTF-8, ru_RU.UTF-8, sk_SK.UTF-8, sl_SI.UTF-8, sr_YU.UTF-8, sv_SE.UTF-8, tr_TR.UTF-8, uk_UA.UTF-8, zh_CN.UTF-8, zh_HK.UTF-8, zh_TW.UTF-8
</code></pre>

<p>看上去和 click 这个 Python 包有点关系，搜索了一番，看了看这个 <a href="https://github.com/madjar/nox/issues/19">issue</a>，猜想可能和没有指定语言有关系，看来需要想办法在 fava.plist 中指定相关的环境变量，</p>

<pre><code class="language-xml">&lt;key&gt;EnvironmentVariables&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;LANG&lt;/key&gt;
    &lt;string&gt;en_US.UTF-8&lt;/string&gt;
&lt;/dict&gt;
</code></pre>

<p>再次加载，成功！</p>

<p>（实际解决问题的过程比这复杂多了，中间走了歪路差不多把 /usr/local/bin/fava 自己写了一遍。真是大大的 <a href="https://bgm.tv/img/smiles/tv/15.gif">bgm38</a>。</p>
]]>
      
      </description>
    </item>
    
    <item>
      <title>用树莓派3搭一个简易的 NAS</title>
      <link>https://lencerf.github.io/post/2016-12-16-build-a-simple-nas-using-raspberry-pi/</link>
      <pubDate>Tue, 06 Dec 2016 21:48:10 -0500</pubDate>
      
      <guid>https://lencerf.github.io/post/2016-12-16-build-a-simple-nas-using-raspberry-pi/</guid>
      <description>
      
      <![CDATA[

<p>先放结论：这个简易 NAS 真的非常简易，大概就是一个无线存储盘的效果。如果需要一个比较可靠的 NAS，多掏点银子买专业的吧。</p>

<p>在升级 macOS Sierra 的当天晚上，我的 Mac 原配的 HDD 就坏了（绝对是库克干的好事），只剩下一块 120GB 的 SSD 作为唯一内置存储设备。我原本已经有一块 1TB 的移动硬盘，但是也已经塞满了。为了满足存储需要只能再去买了一块 2TB 的盘。两块盘同时插在机子上很麻烦，笔记本的可移动性大大降低了。于是我想到了用树莓派搭一个简易 NAS，把移动硬盘变成无线硬盘。</p>

<p>材料：</p>

<ol>
<li>树莓派 Raspberry Pi 3 Model B 及电源线和适配器</li>
<li>Micro SD Card</li>
<li>移动硬盘</li>
<li>带独立供电的 USB Hub</li>
</ol>

<p>此外在配置过程中需要显示器、键盘和鼠标，没有这些设备的话理论上也行，但是会相当麻烦。</p>

<h2 id="系统安装">系统安装</h2>

<p>首先安装官网上的<a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md">指引</a>，下载 Raspbian 系统镜像并安装到 Micro SD Card 之上。</p>

<h2 id="配置-raspbian">配置 Raspbian</h2>

<p>把 Micor SD Card 插入树莓派，接上电源、显示器、鼠标、键盘，呈现在眼前的就如同一台普通的 Linux 计算机了。在终端里键入 <code>sudo raspy-config</code> 可以配置，有这么几个必须进行的操作：</p>

<ol>
<li>开启 ssh，这样今后进行一些简易维护就不需要显示器等设备了。</li>
<li>修改密码。Raspbian 的默认用户名和密码分别是 pi 和 raspberry，改掉密码可以防止不怀好意的人登陆你的树莓派。</li>
<li>修改键盘布局和语言。树莓派是英国的树莓派基金会所开发，所以默认键盘布局和语言都是英式。更换布局的具体步骤可参见<a href="http://henson.github.io/post/raspberrypi4/">这篇文章</a>。</li>
</ol>

<h2 id="修改用户-pi-的-uid">修改用户 pi 的 uid</h2>

<p>需要这一步操作的原因是我选择 HFS+ 作为移动硬盘的文件格式，由于这种文件格式的特性，简而言之，每个文件记录了它的拥有者的 uid，如果当前用户的 uid 和文件里记录的 uid 不一致，那么就无权访问。macOS 上第一个用户的 uid 是 501，而树莓派上默认用户 pi 的 uid 是一个四位数，所以要把 pi 的 uid 改成 501，这样读写就不会遇到麻烦了。</p>

<p>在 macOS 上执行 <code>id</code> 命令可以查看自己的 uid，如果不是 501，那么下面的命令里应该换成正确的数值。</p>

<p>修改用户 pi 的 uid 需要注销并登陆到 root 账户上去改，树莓派默认又是锁定了 root 账户的。首先为 root 账户设置密码</p>

<pre><code class="language-bash">sudo passwd root
</code></pre>

<p>然后解锁 root 账户</p>

<pre><code class="language-bash">sudo passwd --unlock root
</code></pre>

<p>之后去 raspi-config 里面把启动选项改成 Console，重启树莓派登入 root 账户并修改 uid：</p>

<pre><code class="language-bash">usermod -u 501 pi
</code></pre>

<p>然后再去 raspi-config 里把启动选项改回 Desktop Autologin，返回 pi 账户进行下一步操作。</p>

<h2 id="开启文件共享">开启文件共享</h2>

<p>安装 netatalk 和 avahi-daemon</p>

<pre><code class="language-bash">sudo apt-get update; sudo apt-get upgrade; sudo apt-get install netatalk avahi-daemon
</code></pre>

<p>安装完后，如果笔记本和树莓派连接到同一无线局域网，应该就能在 Finder 的侧栏看到树莓派了，用 pi 用户登陆可以访问 Home Directory，也就是 Raspbian 上 pi 用户的主文件夹。当然我需要的是访问移动硬盘。把移动硬盘通过 USB Hub 接上树莓派。首先确认在 Raspbian 系统下能够正常读写移动硬盘，如果移动硬盘采用了 HFS+ 或者 NTFS 之类的文件格式，还需要安装相应的软件包。对于 HFS+ 格式：</p>

<pre><code class="language-bash">sudo apt-get install hfsprogs
</code></pre>

<p>然后修改 netatalk 的共享设置</p>

<pre><code class="language-bash">sudo nano /etc/netatalk/AppleVolumes.default
</code></pre>

<p>可以看到里面已经默认共享了用户主目录。加上共享移动硬盘：<code>/media/pi/mydrive “mydrive”</code>。重启 netatalk:</p>

<pre><code class="language-bash">sudo service netatalk restart
</code></pre>

<h2 id="硬盘睡眠">硬盘睡眠</h2>

<p>最后，硬盘不工作时应当让它进入睡眠，我就不啰嗦了，直接看<a href="http://mkitby.com/2016/05/15/raspberry-pi-nas-manage-hdd-power/">这里</a>。</p>

<h2 id="效果">效果</h2>

<p>从树莓派里下载文件大概是 1MB/s，看个普通的视频足够了，凑合用吧。</p>
]]>
      
      </description>
    </item>
    
    <item>
      <title>Install Arch Linux with Plasma in Paralles Desktop</title>
      <link>https://lencerf.github.io/post/2016-06-09-install-archlinux-with-plasma-in-parallesdesktop/</link>
      <pubDate>Thu, 09 Jun 2016 17:08:08 +0800</pubDate>
      
      <guid>https://lencerf.github.io/post/2016-06-09-install-archlinux-with-plasma-in-parallesdesktop/</guid>
      <description>
      
      <![CDATA[

<h2 id="准备工作">准备工作</h2>

<ul>
<li>下载 Arch Linux <a href="https://www.archlinux.org/download/">镜像</a></li>
<li>新建虚拟机。因为要安装 Plasma，建议内存至少1G。</li>
</ul>

<h2 id="硬盘分区">硬盘分区</h2>

<p>启动虚拟机，开始安装，</p>

<p><img src="https://i.imgur.com/3siPvUb.png" alt="由光盘镜像引导启动后的界面" /></p>

<p>首先需要对硬盘分区。输入命令 <code>cfdisk</code> 可以打开半图形化的分区工具。首先<code>cfdisk</code>会让选择分区表类型，选择第二种<code>dos</code>。然后进入到分区界面，通过下面的菜单<code>New</code>可以新建分区。我采用的分区方案如下，16G给系统，48G给文件，注意将系统区标记为<code>Bootable</code>。</p>

<p><img src="https://i.imgur.com/gZoKUgF.png" alt="分区方案" /></p>

<p>完成后选择<code>Write</code>将分区方案写入硬盘生效，然后<code>Quit</code>。</p>

<p>格式化硬盘分区</p>

<pre><code class="language-sh">mkfs.ext4 /dev/sda1
mkfs.ext4 /dev/sda2
</code></pre>

<p>挂载分区，sda1 挂载到<code>/mnt</code>，sda2 挂载到到<code>/mnt/home</code></p>

<pre><code class="language-sh">mount /dev/sda1 /mnt
mkdir /mnt/home
mount /dev/sda2 /mnt/home
</code></pre>

<h2 id="安装-arch-linux">安装 Arch Linux</h2>

<p>配置镜像源（country=你所在的地区代码）</p>

<pre><code class="language-sh">curl -o /etc/pacman.d/mirrorlist &quot;https://www.archlinux.org/mirrorlist/?country=CN&amp;protocol=http&amp;ip_version=4&quot;
</code></pre>

<p>打开 mirrorlist，反注释掉想要使用的镜像源</p>

<pre><code class="language-sh">nano /etc/pacman.d/mirrorlist
</code></pre>

<p>安装 Arch Linux</p>

<pre><code class="language-sh">pacstrap /mnt base base-devel
</code></pre>

<p><img src="https://i.imgur.com/qkazApk.png" alt="安装过程" /></p>

<p>完成后，进入新安装的系统进行配置</p>

<pre><code class="language-sh">arch-chroot /mnt
</code></pre>

<p>首先设置 Root 密码</p>

<pre><code class="language-sh">passwd
</code></pre>

<p>设置时区，可以通过<code>date</code>命令测试时区是否设置正确</p>

<pre><code class="language-she">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
</code></pre>

<p>设置主机名</p>

<pre><code class="language-sh">echo Archlinux-PD &gt; /etc/hostname
</code></pre>

<p>生成语言配置。首先打开<code>/etc/locale.gen</code>，反注释掉所需要的语言（en_US.UTF8、zh_CN.UTF8），然后执行命令<code>locale-gen</code>。</p>

<pre><code class="language-sh">nano /etc/locale.gen
locale-gen
</code></pre>

<p>安装启动引导 grub</p>

<pre><code class="language-sh">pacman -S grub
grub-install /dev/sda
</code></pre>

<p>配置 grub</p>

<pre><code class="language-sh">mkinitcpio -p linux
grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>

<p><img src="https://i.imgur.com/hQt0Son.png" alt="配置 grub" /></p>

<p>开启网络，然后退出新系统，回到<code>arch-root</code>命令之前的界面。</p>

<pre><code class="language-sh">systemctl enable dhcpcd
exit
</code></pre>

<p>生成 fstab</p>

<pre><code>genfstab /mnt &gt;&gt; /mnt/etc/fstab
</code></pre>

<p>umount 挂载的磁盘，重启虚拟机。</p>

<pre><code class="language-sh">umount /mnt/home
umount /mnt
reboot
</code></pre>

<h2 id="安装-plasma">安装 Plasma</h2>

<p>如果一切顺利重启后可以看到 grub 启动菜单</p>

<p><img src="https://i.imgur.com/zin9rgS.png" alt="grub 启动菜单" /></p>

<p>进入新安装好的系统，以 root 用户登录，密码就是之前执行<code>passwd</code>命令时输入的密码。</p>

<p>先测试一下网络连接情况</p>

<pre><code class="language-sh">ping -c 5 archlinux.org
</code></pre>

<p>如果连接不通，可以尝试手动开启网络</p>

<pre><code class="language-sh">systemctl start dhcpcd
ip addr
</code></pre>

<p>更新一下软件包，然后开始安装 Plasma 和其它必要的软件包。</p>

<pre><code class="language-sh">pacman -Syu
pacman -S xorg plasma zsh git konsole firefox dolphin alsa-utils 
</code></pre>

<p>解释一下，</p>

<ul>
<li>xorg 是 X 窗口服务器，plasma 即是 KDE5</li>
<li>git 和 zsh 没什么好说的</li>
<li>konsole 是 KDE 下的默认终端模拟器，firefox是火狐浏览器，dolphin 是文件管理器</li>
<li>alsa-utils 是声音模块</li>
</ul>

<p>安装完成后，配置一下 X（下面的命令注意 X 要大写）</p>

<pre><code class="language-sh">Xorg -configure
</code></pre>

<p>上面的命令会生成一份配置模版<code>/root/xorg.conf.new</code>，用编辑器打开。</p>

<p>因为我用的是非 retina 屏幕的 MBP 13， 所以在<code>Section &quot;Screen&quot;</code>下的<code>Section &quot;Display&quot;</code>中添加一行<code>Modes &quot;1280x800&quot;</code>就好了。保存，将配置文件移动到合适的位置，然后启用<code>sddm</code>服务。</p>

<pre><code class="language-sh">mv /root/xorg.conf.new /etc/X11/xorg.conf
systemctl enable sddm
</code></pre>

<p>添加用户并设置密码，把 yourname 换成你喜欢的名字</p>

<pre><code class="language-sh">useradd -m -G wheel -s /usr/bin/zsh yourname
passwd yourname
</code></pre>

<p>把自己添加到sudoer中</p>

<pre><code class="language-sh">nano /etc/sudoers
</code></pre>

<p>在末尾添加一行<code>yourname ALL=(ALL) ALL</code></p>

<p>把自己添加到audio用户组中，这样可以开启声音</p>

<pre><code class="language-sh">gpasswd -a yourname audio
</code></pre>

<p>安装一些不错的字体</p>

<pre><code class="language-sh">pacman -S ttf-arphic-uming ttf-arphic-ukai ttf-bitstream-vera adobe-source-han-sans-otc-fonts ttf-fira-sans
</code></pre>

<p>移除没什么用的媒体中心</p>

<pre><code class="language-sh">sudo pacman -R plasma-mediacenter
</code></pre>

<p>到此基本上就完成了，reboot 之后应该就能看到赏心悦目的 Plasma 界面了。</p>

<p><img src="https://i.imgur.com/6sIFdh5.png" alt="Plasma 真漂亮啊！" /></p>

<h2 id="其它">其它</h2>

<ul>
<li><p>以上过程为本人安装成果的整理记录，可能有疏漏，不一定适用于读者的情况。</p></li>

<li><p>字体的问题还没有完全解决，尤其是终端下的中文字体。</p></li>

<li><p>Parallels Tools 似乎和 Arch Linux 不太兼容的样子，虽然能安装上去，但是文件共享一直有问题。具体安装细节可能之后再补充。</p></li>

<li><p>开启 ssh 服务</p></li>
</ul>

<pre><code class="language-sh">pacman -S openssh
systemctl enable sshd.service
systemctl start sshd
</code></pre>

<ul>
<li><p>通过<code>ip route</code>可以查看本机IP，必要时可以从 OS X 端 ssh 登陆到 Arch，也可以用<code>scp</code>往虚拟机里传文件</p></li>

<li><p>Last but maybe the most important, for some Asian users,</p></li>
</ul>

<pre><code class="language-sh">pacman -S shadowsocks-libev
nano /etc/shadowsocks/config.json
systemctl enabnle shadowsocks-libev@config
systemctl start shadowsocks-libev@config
</code></pre>

<h3 id="参考资料">参考资料</h3>

<ol>
<li><a href="http://www.cs.columbia.edu/~jae/4118-LAST/arch-setup-2015-1.html">Setting up an Arch Linux VM in VirtualBox</a></li>
<li>Youtube video: <a href="https://www.youtube.com/watch?v=Wqh9AQt3nho">How to Install Arch Linux</a></li>
<li>Youtube video: <a href="https://www.youtube.com/watch?v=okct6NwqF_Y">How to Install Arch Linux 2016 + KDE Plasma 5 + Open-VM-Tools on VMware Player Free</a></li>
<li><a href="https://yzalog.tk/ss-via-stunnel/">Yza Log&rsquo;s Blog</a></li>
<li><a href="https://wiki.archlinux.org">ArchWiki</a></li>
<li><a href="https://linuxtoy.org/archives/archlinux-guide.html">打造完美的 Linux 桌面 — Archlinux 2007.08-2 (电子版)
</a></li>
</ol>
]]>
      
      </description>
    </item>
    
    <item>
      <title>brew with a socks5 proxy</title>
      <link>https://lencerf.github.io/post/2015-10-03-brew-with-a-socks5-proxy/</link>
      <pubDate>Sat, 03 Oct 2015 22:47:28 +0800</pubDate>
      
      <guid>https://lencerf.github.io/post/2015-10-03-brew-with-a-socks5-proxy/</guid>
      <description>
      
      <![CDATA[<p>Finally, I find the right way to use homebrew.</p>

<ol>
<li><p>Let http requests of git go through a socks5 proxy</p>

<pre><code class="language-shell">git config --global http.proxy 'socks5://127.0.0.1:1081'
</code></pre></li>

<li><p>Since homebrew doanloads files using curl, set a socks proxy for curl: just add <code>proxy=socks5://127.0.0.1:1081</code> to <code>~/.curlrc</code>.</p></li>
</ol>

<p>Too much time has been wasted because of the poor network.</p>
]]>
      
      </description>
    </item>
    
    <item>
      <title>Make unix2doc a system service of OS X</title>
      <link>https://lencerf.github.io/post/2015-06-02-small-trick-unix2dos-as-service/</link>
      <pubDate>Tue, 02 Jun 2015 00:32:49 +0800</pubDate>
      
      <guid>https://lencerf.github.io/post/2015-06-02-small-trick-unix2dos-as-service/</guid>
      <description>
      
      <![CDATA[<p>Revising an academic paper is really a hard work. What makes things worse is that WinEdit used by my advisor is only capable of handling .tex files with <code>CRLF</code> line breaks while TeXShop.app uses <code>LF</code> as a line ending.</p>

<p>Although I can use other applications like TextWrangle.app to convert text files between the two formats, I really do not want to open an extra window. So I find unix2dox, a command line tool that is developed to &ldquo;convert text between DOS, UNIX, and Mac formats&rdquo;. And with Automator, I get a better solution.</p>

<ol>
<li><p>Install unix2dos: <code>brew install unix2dos</code></p></li>

<li><p>Create a new service in Automator. Drag a &ldquo;Run Shell Script&rdquo; action from the Library and type in the following commands:</p>

<pre><code class="language-sh">for f in &quot;$@&quot;
do 
unix2dos &quot;$f&quot;
done
</code></pre>

<p>Make sure that choose &ldquo;as argument&rdquo; for the option &ldquo;Pass input&rdquo;.
<img src="https://i.imgur.com/vbDeBZr.png" alt="" /></p></li>

<li><p>&ldquo;unix2dos&rdquo; will show up in the services when you right click on any text files.</p></li>
</ol>
]]>
      
      </description>
    </item>
    
    <item>
      <title>设置 Mathematica 的默认字号</title>
      <link>https://lencerf.github.io/post/2015-02-25-set-default-fontsize-for-mathematica/</link>
      <pubDate>Wed, 25 Feb 2015 17:22:43 +0800</pubDate>
      
      <guid>https://lencerf.github.io/post/2015-02-25-set-default-fontsize-for-mathematica/</guid>
      <description>
      
      <![CDATA[<p>Mathematica 的默认字体看起太小，尤其我的 MacBook 没有配 Retina 屏幕，看起来伤眼睛。</p>

<p>在 Mathematica 的 Format-&gt;Option Inspector 中以<code>fontsize</code>搜索<code>Global Preference</code>，修改<code>12</code>为<code>16</code>。但是，尝试多次，重启 Mathematica 也无效。<del>要对 Mathematica 粉转黑了！</del></p>

<p>最后，在 <a href="http://mathematica.stackexchange.com/questions/59283/changing-the-default-font-size">StackExchange</a> 找到了一个曲线救国的方法：NotebookOptions-&gt;Display Options-&gt;Magnification，把<code>1</code>修改为<code>1.5</code>或其他，即把整个 notebook 的显示全局放大。</p>

<p><img src="http://ww4.sinaimg.cn/large/eb7f99fcgw1eplqnlb507j20l80gxju9.jpg" alt="设置全局放大" /></p>
]]>
      
      </description>
    </item>
    
    <item>
      <title>配置 Sublime Text 的 LaTeX 写作环境</title>
      <link>https://lencerf.github.io/post/2014-11-20-latex-with-sublime-text-3/</link>
      <pubDate>Thu, 20 Nov 2014 23:32:35 +0800</pubDate>
      
      <guid>https://lencerf.github.io/post/2014-11-20-latex-with-sublime-text-3/</guid>
      <description>
      
      <![CDATA[<blockquote>
<p>又开始折腾了。。。</p>
</blockquote>

<h2 id="安装-latextools">安装 LaTeXTools</h2>

<ol>
<li>View -&gt; Show Console，打开终端界面，将 Package Control <a href="https://sublime.wbond.net/installation">官网</a>给出的代码复制粘贴进终端，回车完成 Package Control 的安装。</li>
<li><code>Command-Shift-P</code>调出命令窗口，输入<code>Install</code>，等待一会，之后输入<code>LaTeXTools</code>，回车完成安装，时常取决于网络。</li>
<li>安装 <a href="http://skim-app.sourceforge.net/">Skim</a>，用于预览编译好的PDF文件。</li>
</ol>

<h2 id="初始设置">初始设置</h2>

<h3 id="latextools">LaTeXTools</h3>

<ol>
<li>初始化：按下<code>Command-Shift-P</code>，输入&rdquo;latextools&rdquo;，选择&rdquo;LaTeXTools:Reconfigure&hellip;&ldquo;，回车。
<img src="http://ww2.sinaimg.cn/large/eb7f99fcgw1emibebpra4j20jm0d5n05.jpg" alt="LaTeXTools 的初始化" /></li>
<li>设置编译时输出详细日志：前往<code>~/Library/Application Support/Sublime Text 3/Packages/User/</code>，打开<code>LaTeXTools.sublime-settings</code>，将<code>&quot;display_log&quot; : false,</code>改为<code>&quot;display_log&quot; : true,</code>。这样编译时心里有个底，看屏幕上输出一段一段高端大气的代码然后生成精美的 paper 的时候的快感怎么能少？</li>

<li><p>设置默认使用 XeLaTeX 编译文件：虽然可以去修改<code>LaTeXTools.sublime-settings</code>,不过最简单安全的方法还是在自己的 TeX 源文件开头加上<code>%!TEX program = xelatex</code>，修改一下自己的模板就一劳永逸了，难道每次都从输入<code>\begin{document}</code>开始？</p>

<h3 id="skim">Skim</h3>

<p>在 Skim 的选项-同步中，不要勾选“检查文件变化”，“同步支持”选择“Sumlime Text”
<img src="http://ww2.sinaimg.cn/large/eb7f99fcgw1emibc7nfn6j20f00bxmyg.jpg" alt="Skim 设置" /></p></li>
</ol>

<h2 id="skim-与-sublime-text-之间的跳转按键">Skim 与 Sublime Text 之间的跳转按键</h2>

<ul>
<li>Skim：<code>Command-Shift-单击</code></li>
<li>Sublime Text：<code>Command-L</code>,松开<code>Command</code>，迅速按下<code>J</code></li>
</ul>]]>
      
      </description>
    </item>
    
  </channel>
</rss>
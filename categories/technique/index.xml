<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technique on Lencerf&#39;s Walk</title>
    <link>/categories/technique/</link>
    <description>Recent content in Technique on Lencerf&#39;s Walk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Mar 2017 04:22:39 +0000</lastBuildDate>
    
	<atom:link href="/categories/technique/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VSCode extension for Beancount</title>
      <link>/post/2017-03-10-vscode-beancount/</link>
      <pubDate>Sat, 11 Mar 2017 04:22:39 +0000</pubDate>
      
      <guid>/post/2017-03-10-vscode-beancount/</guid>
      <description>Homepage: Beancount on Marketplace
Installation: ext install beancount
Source Code: Lencerf/vscode-beancount
This is a simple VSCode extension for Beancount, with the following features:
 Syntax highlight, Decimal point alignment, Current time quick insertion, Auto indent for a new posting record.  I wish to thank Chris for elaborating how to programmatically modify document contents and Martin for sharing the Beancount sytax file with me.
I started making this extension after I tried VSCode for one day.</description>
    </item>
    
    <item>
      <title>launchd 和 click</title>
      <link>/post/2016-12-15-launchd-and-click/</link>
      <pubDate>Thu, 15 Dec 2016 10:16:18 -0500</pubDate>
      
      <guid>/post/2016-12-15-launchd-and-click/</guid>
      <description>起因是看了一篇介绍 Beancount 的博文后，我就变成了数豆狂魔，大概是心底某种控制欲被激发了出来，没事就喜欢打开 fava 研究自己那点生活补贴流向哪里了。每次开 fava 前都需要在终端里现开启之，有点麻烦，于是我就想让它一直运行在后台。在 macOS 上开启一个程序并让它一直运行在后台的方法自然是用 launchd，我很快就写好了配置文件：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;lencerf.fava&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;/usr/local/bin/fava&amp;lt;/string&amp;gt; &amp;lt;string&amp;gt;/Users/Lencerf/Dropbox/Application Data/BeanCount/main.bean&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;/dict&amp;gt; &amp;lt;/plist&amp;gt;  然而 launchctl load fava.plist 后在浏览器里访问 http://localhost:5000/ 却毫无反应。完全想不出问题出在哪里，本着控制变量的原则，我先尝试一下 bean-web。把 /usr/local/bin/fava 换成 /usr/local/bin/bean-web 后访问 http://localhost:8080/，可以打开 bean-web 页面，说明问题在 fava 身上。
但是 fava.plist 加载之后 fava 运行在后台，看不到任何输出信息，如何 debug 呢？Google 之后找到了办法，这个页面上提供了几个解决办法，我采用的第二个办法，指定输出到文件，在上面的 plist 文件中加入几个键值：
&amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;/path/to/logfile.log&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;/path/to/error.log&amp;lt;/string&amp;gt;  于是当我打开再次 launchctl load fava.</description>
    </item>
    
    <item>
      <title>用树莓派3搭一个简易的 NAS</title>
      <link>/post/2016-12-16-build-a-simple-nas-using-raspberry-pi/</link>
      <pubDate>Tue, 06 Dec 2016 21:48:10 -0500</pubDate>
      
      <guid>/post/2016-12-16-build-a-simple-nas-using-raspberry-pi/</guid>
      <description>先放结论：这个简易 NAS 真的非常简易，大概就是一个无线存储盘的效果。如果需要一个比较可靠的 NAS，多掏点银子买专业的吧。
在升级 macOS Sierra 的当天晚上，我的 Mac 原配的 HDD 就坏了（绝对是库克干的好事），只剩下一块 120GB 的 SSD 作为唯一内置存储设备。我原本已经有一块 1TB 的移动硬盘，但是也已经塞满了。为了满足存储需要只能再去买了一块 2TB 的盘。两块盘同时插在机子上很麻烦，笔记本的可移动性大大降低了。于是我想到了用树莓派搭一个简易 NAS，把移动硬盘变成无线硬盘。
材料：
 树莓派 Raspberry Pi 3 Model B 及电源线和适配器 Micro SD Card 移动硬盘 带独立供电的 USB Hub  此外在配置过程中需要显示器、键盘和鼠标，没有这些设备的话理论上也行，但是会相当麻烦。
系统安装 首先安装官网上的指引，下载 Raspbian 系统镜像并安装到 Micro SD Card 之上。
配置 Raspbian 把 Micor SD Card 插入树莓派，接上电源、显示器、鼠标、键盘，呈现在眼前的就如同一台普通的 Linux 计算机了。在终端里键入 sudo raspy-config 可以配置，有这么几个必须进行的操作：
 开启 ssh，这样今后进行一些简易维护就不需要显示器等设备了。 修改密码。Raspbian 的默认用户名和密码分别是 pi 和 raspberry，改掉密码可以防止不怀好意的人登陆你的树莓派。 修改键盘布局和语言。树莓派是英国的树莓派基金会所开发，所以默认键盘布局和语言都是英式。更换布局的具体步骤可参见这篇文章。  修改用户 pi 的 uid 需要这一步操作的原因是我选择 HFS+ 作为移动硬盘的文件格式，由于这种文件格式的特性，简而言之，每个文件记录了它的拥有者的 uid，如果当前用户的 uid 和文件里记录的 uid 不一致，那么就无权访问。macOS 上第一个用户的 uid 是 501，而树莓派上默认用户 pi 的 uid 是一个四位数，所以要把 pi 的 uid 改成 501，这样读写就不会遇到麻烦了。</description>
    </item>
    
    <item>
      <title>Install Arch Linux with Plasma in Paralles Desktop</title>
      <link>/post/2016-06-09-install-archlinux-with-plasma-in-parallesdesktop/</link>
      <pubDate>Thu, 09 Jun 2016 17:08:08 +0800</pubDate>
      
      <guid>/post/2016-06-09-install-archlinux-with-plasma-in-parallesdesktop/</guid>
      <description>准备工作  下载 Arch Linux 镜像 新建虚拟机。因为要安装 Plasma，建议内存至少1G。  硬盘分区 启动虚拟机，开始安装，
首先需要对硬盘分区。输入命令 cfdisk 可以打开半图形化的分区工具。首先cfdisk会让选择分区表类型，选择第二种dos。然后进入到分区界面，通过下面的菜单New可以新建分区。我采用的分区方案如下，16G给系统，48G给文件，注意将系统区标记为Bootable。
完成后选择Write将分区方案写入硬盘生效，然后Quit。
格式化硬盘分区
mkfs.ext4 /dev/sda1 mkfs.ext4 /dev/sda2  挂载分区，sda1 挂载到/mnt，sda2 挂载到到/mnt/home
mount /dev/sda1 /mnt mkdir /mnt/home mount /dev/sda2 /mnt/home  安装 Arch Linux 配置镜像源（country=你所在的地区代码）
curl -o /etc/pacman.d/mirrorlist &amp;quot;https://www.archlinux.org/mirrorlist/?country=CN&amp;amp;protocol=http&amp;amp;ip_version=4&amp;quot;  打开 mirrorlist，反注释掉想要使用的镜像源
nano /etc/pacman.d/mirrorlist  安装 Arch Linux
pacstrap /mnt base base-devel  完成后，进入新安装的系统进行配置
arch-chroot /mnt  首先设置 Root 密码
passwd  设置时区，可以通过date命令测试时区是否设置正确
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  设置主机名</description>
    </item>
    
    <item>
      <title>brew with a socks5 proxy</title>
      <link>/post/2015-10-03-brew-with-a-socks5-proxy/</link>
      <pubDate>Sat, 03 Oct 2015 22:47:28 +0800</pubDate>
      
      <guid>/post/2015-10-03-brew-with-a-socks5-proxy/</guid>
      <description>Finally, I find the right way to use homebrew.
 Let http requests of git go through a socks5 proxy
git config --global http.proxy &#39;socks5://127.0.0.1:1081&#39;  Since homebrew doanloads files using curl, set a socks proxy for curl: just add proxy=socks5://127.0.0.1:1081 to ~/.curlrc.
  Too much time has been wasted because of the poor network.</description>
    </item>
    
    <item>
      <title>Make unix2doc a system service of OS X</title>
      <link>/post/2015-06-02-small-trick-unix2dos-as-service/</link>
      <pubDate>Tue, 02 Jun 2015 00:32:49 +0800</pubDate>
      
      <guid>/post/2015-06-02-small-trick-unix2dos-as-service/</guid>
      <description>Revising an academic paper is really a hard work. What makes things worse is that WinEdit used by my advisor is only capable of handling .tex files with CRLF line breaks while TeXShop.app uses LF as a line ending.
Although I can use other applications like TextWrangle.app to convert text files between the two formats, I really do not want to open an extra window. So I find unix2dox, a command line tool that is developed to &amp;ldquo;convert text between DOS, UNIX, and Mac formats&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>设置 Mathematica 的默认字号</title>
      <link>/post/2015-02-25-set-default-fontsize-for-mathematica/</link>
      <pubDate>Wed, 25 Feb 2015 17:22:43 +0800</pubDate>
      
      <guid>/post/2015-02-25-set-default-fontsize-for-mathematica/</guid>
      <description>Mathematica 的默认字体看起太小，尤其我的 MacBook 没有配 Retina 屏幕，看起来伤眼睛。
在 Mathematica 的 Format-&amp;gt;Option Inspector 中以fontsize搜索Global Preference，修改12为16。但是，尝试多次，重启 Mathematica 也无效。要对 Mathematica 粉转黑了！
最后，在 StackExchange 找到了一个曲线救国的方法：NotebookOptions-&amp;gt;Display Options-&amp;gt;Magnification，把1修改为1.5或其他，即把整个 notebook 的显示全局放大。</description>
    </item>
    
    <item>
      <title>配置 Sublime Text 的 LaTeX 写作环境</title>
      <link>/post/2014-11-20-latex-with-sublime-text-3/</link>
      <pubDate>Thu, 20 Nov 2014 23:32:35 +0800</pubDate>
      
      <guid>/post/2014-11-20-latex-with-sublime-text-3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;又开始折腾了。。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>